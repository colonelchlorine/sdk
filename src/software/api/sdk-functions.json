[
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.DataToComponentContent.WrapData(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.DataToComponentContent.WrapData",
    "Name": "WrapData",
    "Type": "SDK Method",
    "Summary": "Wraps the provided data in the data to component 'envelope'. NOTE: The endianness of IDs and other numbers inside of the payload are reversed to keep the C# format.",
    "Params": [
      {
        "Name": "data",
        "Type": "",
        "IsRequired": null,
        "Description": "The data to be wrapped."
      },
      {
        "Name": "channel",
        "Type": "",
        "IsRequired": null,
        "Description": "The channel to send the data to."
      },
      {
        "Name": "componentType",
        "Type": "",
        "IsRequired": null,
        "Description": "The component type being addressed."
      },
      {
        "Name": "componentIndex",
        "Type": "",
        "IsRequired": null,
        "Description": "The component type's index, for example, AUX 5 on an auxiliary expansion port."
      },
      {
        "Name": "isAcknowledgeRequired",
        "Type": "",
        "IsRequired": null,
        "Description": "true if the recipient device must ack the receipt of this message, false otherwise."
      },
      {
        "Name": "isExtended",
        "Type": "",
        "IsRequired": null,
        "Description": "Flag to indicate message requires two length bytes."
      }
    ],
    "Example": "",
    "Returns": "byte array",
    "Score": 100
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.ValidateRange(System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.FuelTaxDetail})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.ValidateRange",
    "Name": "ValidateRange",
    "Type": "SDK Method",
    "Summary": "Checks that a contiguous list of details is internally consistent.",
    "Params": [
      {
        "Name": "details",
        "Type": "",
        "IsRequired": null,
        "Description": "The details."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 101
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.UploadMediaFileAsync(Microsoft.AspNetCore.Http.HttpContext,CheckmateServer.Web.PostedFormFiles,Geotab.Checkmate.Database.DataStore,Geotab.Checkmate.ObjectModel.Files.MediaFile,System.Threading.CancellationToken)",
    "FullName": "M:CheckmateServer.Web.WebMethods.UploadMediaFileAsync",
    "Name": "UploadMediaFile",
    "Type": "SDK Method",
    "Summary": "Upload a file for the corresponding using multipart/form-data POST request.",
    "Params": [
      {
        "Name": "postedFiles",
        "Type": "",
        "IsRequired": null,
        "Description": "Files that were uploaded with multiple data."
      },
      {
        "Name": "mediaFile",
        "Type": "",
        "IsRequired": "required",
        "Description": "The of which to add the file for."
      }
    ],
    "Example": "",
    "Returns": "A.",
    "Score": 102
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.API.UploadAsync(System.IO.Stream,Geotab.Checkmate.ObjectModel.Files.MediaFile,System.Threading.CancellationToken)",
    "FullName": "M:Geotab.Checkmate.API.UploadAsync",
    "Name": "Upload",
    "Type": "SDK Method",
    "Summary": "Make an API call using generic type method to Upload a stream of data.",
    "Params": [
      {
        "Name": "inputStream",
        "Type": "",
        "IsRequired": "required",
        "Description": "The of binary data to upload."
      },
      {
        "Name": "mediaFile",
        "Type": "",
        "IsRequired": "required",
        "Description": "The fully populated corresponding to the file to upload."
      }
    ],
    "Example": "",
    "Returns": "A completed result.",
    "Score": 103
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.TryParseOlsonTimeZoneId(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.TryParseOlsonTimeZoneId",
    "Name": "TryParseOlsonTimeZoneId",
    "Type": "SDK Method",
    "Summary": "Gets the for the specified Timezone ID.",
    "Params": [
      {
        "Name": "timeZoneId",
        "Type": "",
        "IsRequired": null,
        "Description": "A containing the Timezone id to convert."
      }
    ],
    "Example": "",
    "Returns": "the associated with the specified timeZoneId, if the conversion succeeded, or null if the conversion failed. The conversion fails if the TimeZoneId is not a valid Timezone id.",
    "Score": 104
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.TryCompare(Geotab.Checkmate.ObjectModel.Id,System.Int32@)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.TryCompare",
    "Name": "TryCompare",
    "Type": "SDK Method",
    "Summary": "Tries to compares the current instance with another object of the same base type of but potentially different .",
    "Params": [
      {
        "Name": "other",
        "Type": "",
        "IsRequired": null,
        "Description": "An object to compare with this instance."
      },
      {
        "Name": "result",
        "Type": "",
        "IsRequired": null,
        "Description": "The comparison success or failure result."
      }
    ],
    "Example": "",
    "Returns": "True if the comparison succeeded in determining the comparison result, False otherwise.",
    "Score": 105
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.TrimRight(System.DateTime@)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.TrimRight",
    "Name": "TrimRight",
    "Type": "SDK Method",
    "Summary": "Clips the detail at the nearest hour at or before a given point in time.",
    "Params": [
      {
        "Name": "dateTime",
        "Type": "",
        "IsRequired": null,
        "Description": "The time."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 106
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.TrimLeft(System.DateTime@)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.TrimLeft",
    "Name": "TrimLeft",
    "Type": "SDK Method",
    "Summary": "Clips the detail at the nearest hour at or before a given point in time.",
    "Params": [
      {
        "Name": "dateTime",
        "Type": "",
        "IsRequired": null,
        "Description": "The time."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 107
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.TraverseConditions(System.Func{Geotab.Checkmate.ObjectModel.Exceptions.Condition,System.Boolean},System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.TraverseConditions",
    "Name": "TraverseConditions",
    "Type": "SDK Method",
    "Summary": "Enumerates the conditions tree.",
    "Params": [
      {
        "Name": "action",
        "Type": "",
        "IsRequired": null,
        "Description": "A func where the input is a , output is a ."
      },
      {
        "Name": "optimize",
        "Type": "",
        "IsRequired": null,
        "Description": "Optimize out empty conditions (slower)."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 108
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.TraverseChildren(Geotab.Checkmate.ObjectModel.Exceptions.Condition,System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.Exceptions.Condition},System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.TraverseChildren",
    "Name": "TraverseChildren",
    "Type": "SDK Method",
    "Summary": "Traverses the children.",
    "Params": [
      {
        "Name": "parent",
        "Type": "",
        "IsRequired": null,
        "Description": "The parent."
      },
      {
        "Name": "children",
        "Type": "",
        "IsRequired": null,
        "Description": "The children."
      },
      {
        "Name": "optimize",
        "Type": "",
        "IsRequired": null,
        "Description": "if set to true [optimize]."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 109
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.SystemIdFromString(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.SystemIdFromString",
    "Name": "SystemIdFromString",
    "Type": "SDK Method",
    "Summary": "false Gets a system id from a string.",
    "Params": [
      {
        "Name": "s",
        "Type": "",
        "IsRequired": null,
        "Description": "The string representing a system id."
      }
    ],
    "Example": "",
    "Returns": "system id.",
    "Score": 110
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.DistributionList.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.DistributionList.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "System from identifier.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The identifier."
      }
    ],
    "Example": "",
    "Returns": "The.",
    "Score": 111
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.Controller.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.Controller.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system Controller from the provided system else null if its a not a system Controller.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 112
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.FailureMode.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.FailureMode.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system failure mode from the provided system else null if its a not a system failure mode.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "FailureMode.",
    "Score": 113
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.FaultStatus.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.FaultStatus.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system FaultStatus from the provided system. In the case a match is missing, the default value will be FaultStatusNone.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "The.",
    "Score": 114
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.ParameterGroup.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.ParameterGroup.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system parameter group from the provided system else null if its a not a system parameter group.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "The ParameterGroup from Id.",
    "Score": 115
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.Source.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.Source.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system Source from the provided system else null if it's not a system Source.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "The.",
    "Score": 116
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system unit of measure from the provided system else null if its a not a system unit of measure.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 117
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Recipient.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Recipient.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system User from the provided system else null if its a not a system user.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The."
      }
    ],
    "Example": "",
    "Returns": "The recipient.",
    "Score": 118
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Trailer.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Trailer.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system Trailer from the provided system, otherwise this returns null.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The unique of the trailer."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 119
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system User from the provided system else null if its a not a system user.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "A user derived from the provided id.",
    "Score": 120
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.WorkTime.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.WorkTime.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system WorkTime from the provided system else null if its a not a system WorkTime.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "The worktime represented by the given Id.",
    "Score": 121
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.ZoneType.SystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.ZoneType.SystemFromId",
    "Name": "SystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system ZoneType from the provided system else null if its a not a system ZoneType.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 122
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.StringFromSystemId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.StringFromSystemId",
    "Name": "StringFromSystemId",
    "Type": "SDK Method",
    "Summary": "false Gets string from system id.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "string representation of a system id.",
    "Score": 123
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.XDevice.SpeedToByte(System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.XDevice.SpeedToByte",
    "Name": "SpeedToByte",
    "Type": "SDK Method",
    "Summary": "Converts speed to byte.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      }
    ],
    "Example": "",
    "Returns": "The byte encoded representation of the speed.",
    "Score": 124
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Route.SortStops(System.Comparison{Geotab.Checkmate.ObjectModel.RoutePlanItem})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Route.SortStops",
    "Name": "SortStops",
    "Type": "SDK Method",
    "Summary": "Sorts thes (stops) based on the provided comparer. By default the stops are sorted by their sequence.",
    "Params": [
      {
        "Name": "comparer",
        "Type": "",
        "IsRequired": null,
        "Description": "of type"
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 125
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.Database.DataStore.SetUserPasswordAsync(System.String,System.Threading.CancellationToken)",
    "FullName": "M:Geotab.Checkmate.Database.DataStore.SetUserPasswordAsync",
    "Name": "SetUserPassword",
    "Type": "SDK Method",
    "Summary": "Set the's password.",
    "Params": [
      {
        "Name": "newPassword",
        "Type": "",
        "IsRequired": null,
        "Description": "The new password to be set for the current user."
      }
    ],
    "Example": "",
    "Returns": "Task representing completion",
    "Score": 126
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.SetUserName(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.SetUserName",
    "Name": "SetUserName",
    "Type": "SDK Method",
    "Summary": "Sets the user.Name string.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The name value."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 127
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.SetUserId(System.String,System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.SetUserId",
    "Name": "SetUserId",
    "Type": "SDK Method",
    "Summary": "Sets the user ID string. @return The user ID string. The userId and Password pair are the's checkmate credentials.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      },
      {
        "Name": "keepNameAndUserAuthenticationType",
        "Type": "",
        "IsRequired": null,
        "Description": "Only set userID and do not update other properties."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 128
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.SetPasswordHash(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.SetPasswordHash",
    "Name": "SetPasswordHash",
    "Type": "SDK Method",
    "Summary": "Sets the password hash.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 129
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.SetPasswordDateTime(System.Nullable{System.DateTime})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.SetPasswordDateTime",
    "Name": "SetPasswordDateTime",
    "Type": "SDK Method",
    "Summary": "Sets the date the user set/changed password.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 130
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.CustomData.SetLoadedSections(Geotab.Checkmate.ObjectModel.CustomDataSections)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.CustomData.SetLoadedSections",
    "Name": "SetLoadedSections",
    "Type": "SDK Method",
    "Summary": "Whether the loaded sections. Used for serialization only.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "Byte array"
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 131
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.SetIsEULAAccepted(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.SetIsEULAAccepted",
    "Name": "SetIsEULAAccepted",
    "Type": "SDK Method",
    "Summary": "a value indicating accepted EULA revision.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The EULA version."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 132
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.CustomData.SetDataLength(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.CustomData.SetDataLength",
    "Name": "SetDataLength",
    "Type": "SDK Method",
    "Summary": "The length of the field.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": ""
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 133
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.SetClientSettings(Geotab.Checkmate.ObjectModel.ClientSettings)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.SetClientSettings",
    "Name": "SetClientSettings",
    "Type": "SDK Method",
    "Summary": "Set ClientSettings for the.",
    "Params": [
      {
        "Name": "newSettings",
        "Type": "",
        "IsRequired": null,
        "Description": "The new."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 134
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.SetAcceptedEULADate(System.Nullable{System.DateTime})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.SetAcceptedEULADate",
    "Name": "SetAcceptedEULADate",
    "Type": "SDK Method",
    "Summary": "The date when the EULA was accepted.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The date."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 135
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.SetAcceptedEULA(System.Nullable{System.Int32})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.SetAcceptedEULA",
    "Name": "SetAcceptedEULA",
    "Type": "SDK Method",
    "Summary": "A value indicating the accepted EULA revision number.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The EULA revision number."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 136
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.Database.DataStore.Set``1(``0)",
    "FullName": "M:Geotab.Checkmate.Database.DataStore.Set``1",
    "Name": "Set``1",
    "Type": "SDK Method",
    "Summary": "Modify an which is an object in the database. The id of the object must be populated.",
    "Params": [
      {
        "Name": "entity",
        "Type": "",
        "IsRequired": "required",
        "Description": "The to be modified."
      }
    ],
    "Example": "The following JavaScript example shows how to change entities (for example zone's name). var zoneName = prompt(\"Enter current zone name\"), newZoneName = prompt(\"Enter new zone name\"); api.call(\"Get\", { \"typeName\": \"Zone\", \"search\": { name: \"%\" + zoneName + \"%\" } }, function(zones){ var zone = zones[0]; if (zone) { zone.name = newZoneName; api.call(\"Set\", { \"typeName\": \"Zone\", \"entity\": zone }); } else { console.log(\"There is no zone with such name\"); } });",
    "Returns": "",
    "Score": 137
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.SerializeId(System.Text.Json.Utf8JsonWriter,System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.SerializeId",
    "Name": "SerializeId",
    "Type": "SDK Method",
    "Summary": "An method used to write the json representation of the id to the provided.",
    "Params": [
      {
        "Name": "writer",
        "Type": "",
        "IsRequired": null,
        "Description": "The to write the json representation of the id to."
      },
      {
        "Name": "asPropertyName",
        "Type": "",
        "IsRequired": null,
        "Description": "A bool indicating if the is to be a property name or a value. The default is value."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 138
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.Diagnostic.SeparateByDiagnostic``1(System.Collections.Generic.IEnumerable{``0})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.Diagnostic.SeparateByDiagnostic``1",
    "Name": "SeparateByDiagnostic``1",
    "Type": "SDK Method",
    "Summary": "Separates collection of interface objects into individual collections by objects.",
    "Params": [
      {
        "Name": "collection",
        "Type": "",
        "IsRequired": null,
        "Description": "The collection."
      }
    ],
    "Example": "",
    "Returns": "The separateds.",
    "Score": 139
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.CustomData.SaveData(Geotab.Checkmate.ObjectModel.CustomDataSections,System.Byte[],System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.CustomData.SaveData",
    "Name": "SaveData",
    "Type": "SDK Method",
    "Summary": "Saves the data.",
    "Params": [
      {
        "Name": "section",
        "Type": "",
        "IsRequired": null,
        "Description": "The section."
      },
      {
        "Name": "bytes",
        "Type": "",
        "IsRequired": null,
        "Description": "The bytes."
      },
      {
        "Name": "start",
        "Type": "",
        "IsRequired": null,
        "Description": "Offset where to start in bytes array."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 140
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.RoundDistance(System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.RoundDistance",
    "Name": "RoundDistance",
    "Type": "SDK Method",
    "Summary": "Rounds a distance, in km, using.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The distance."
      }
    ],
    "Example": "",
    "Returns": "The rounded distance.",
    "Score": 141
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.RoundDateTime(System.DateTime@)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.RoundDateTime",
    "Name": "RoundDateTime",
    "Type": "SDK Method",
    "Summary": "Rounds a .NET value using a database-supported precision.",
    "Params": [
      {
        "Name": "dateTime",
        "Type": "",
        "IsRequired": null,
        "Description": "The given time."
      }
    ],
    "Example": "",
    "Returns": "The rounded time.",
    "Score": 142
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.RoundCoordinate(System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.RoundCoordinate",
    "Name": "RoundCoordinate",
    "Type": "SDK Method",
    "Summary": "Rounds a coordinate, in degrees, using.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The coordinate."
      }
    ],
    "Example": "",
    "Returns": "The rounded coordinate.",
    "Score": 143
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TextMessage.RemoveSystemMessages(System.Collections.Generic.IList{System.Object})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TextMessage.RemoveSystemMessages",
    "Name": "RemoveSystemMessages",
    "Type": "SDK Method",
    "Summary": "Remove system messages from a collection of text messages.",
    "Params": [
      {
        "Name": "textMessages",
        "Type": "",
        "IsRequired": null,
        "Description": "The collection of text message."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 144
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.Database.DataStore.Remove``1(``0)",
    "FullName": "M:Geotab.Checkmate.Database.DataStore.Remove``1",
    "Name": "Remove``1",
    "Type": "SDK Method",
    "Summary": "Permanently removes an and its associated data. The object must have an field. Remaining fields are optional. Note: the does not function as a filter.",
    "Params": [
      {
        "Name": "entity",
        "Type": "",
        "IsRequired": "required",
        "Description": "The to be removed."
      }
    ],
    "Example": "The following JavaScript example shows how to remove a zone. var zoneName = prompt(\"Enter the name of zone that you want to remove\"); api.call(\"Get\", { \"typeName\": \"Zone\", \"search\": { name: \"%\" + zoneName + \"%\" } }, function(zones){ if (zones.length) { api.call(\"Remove\", { \"typeName\": \"Zone\", \"entity\": { \"id\": zones[0].id } }); } else { console.log(\"There is no zone with such name\"); } });",
    "Returns": "",
    "Score": 145
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FieldSelector.Remove(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FieldSelector.Remove",
    "Name": "Remove",
    "Type": "SDK Method",
    "Summary": "Removes a field from the selection.",
    "Params": [
      {
        "Name": "field",
        "Type": "",
        "IsRequired": null,
        "Description": "The field."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 146
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.RectangleFromLtrb(System.Double,System.Double,System.Double,System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.RectangleFromLtrb",
    "Name": "RectangleFromLtrb",
    "Type": "SDK Method",
    "Summary": "Gets collection of(s) representing rectangular shape.",
    "Params": [
      {
        "Name": "left",
        "Type": "",
        "IsRequired": null,
        "Description": "The left."
      },
      {
        "Name": "top",
        "Type": "",
        "IsRequired": null,
        "Description": "The top."
      },
      {
        "Name": "right",
        "Type": "",
        "IsRequired": null,
        "Description": "The right."
      },
      {
        "Name": "bottom",
        "Type": "",
        "IsRequired": null,
        "Description": "The bottom."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 147
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Device.ProductIdFromSerialNumber(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Device.ProductIdFromSerialNumber",
    "Name": "ProductIdFromSerialNumber",
    "Type": "SDK Method",
    "Summary": "Returns the product id from its serial number;",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "Internal product Id for a serial number"
      }
    ],
    "Example": "",
    "Returns": "product id",
    "Score": 148
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Device.PrefixFromDeviceType(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Device.PrefixFromDeviceType",
    "Name": "PrefixFromDeviceType",
    "Type": "SDK Method",
    "Summary": "Returns the string prefix of the given product ID.",
    "Params": [
      {
        "Name": "productId",
        "Type": "",
        "IsRequired": null,
        "Description": "Internal product Id for a serial number"
      }
    ],
    "Example": "",
    "Returns": "A serial number prefix.",
    "Score": 149
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.OptimizeWaypointsAsync(Geotab.Checkmate.Database.DataStore,System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.Geographical.Waypoint},System.Threading.CancellationToken)",
    "FullName": "M:CheckmateServer.Web.WebMethods.OptimizeWaypointsAsync",
    "Name": "OptimizeWaypoints",
    "Type": "SDK Method",
    "Summary": "Optimizes a set of(s).",
    "Params": [
      {
        "Name": "waypoints",
        "Type": "",
        "IsRequired": "required",
        "Description": "The original(s) (Maximum 25)."
      }
    ],
    "Example": "The following JavaScript example shows how to optimize a sequence of waypoints. api.call(\"OptimizeWaypoints\", { \"waypoints\" : [{ \"coordinate\" : { \"x\" : -79.78167419433593, \"y\" : 43.51832580566406 }, \"sequence\" : 0, \"description\": \"A\" }, { \"coordinate\" : { \"x\" : -79.8455322265625, \"y\" : 43.51230010986328 }, \"sequence\" : 1, \"description\": \"B\" }, { \"coordinate\" : { \"x\" : -79.968017578125, \"y\" : 43.42531967163086 }, \"sequence\" : 2, \"description\": \"C\" }, { \"coordinate\" : { \"x\" : -79.96439819335937, \"y\" : 43.47275924682617 }, \"sequence\" : 3, \"description\": \"D\" }, { \"coordinate\" : { \"x\" : -79.78167419433593, \"y\" : 43.51832580566406 }, \"sequence\" : 4, \"description\": \"E\" } ] }, function (result) { console.log(\"Done: \", result); }, function (e) { console.error(\"Failed:\", e); });",
    "Returns": "A set of optimized.",
    "Score": 150
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.OptimizeEmptyChildren(Geotab.Checkmate.ObjectModel.Exceptions.Condition)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.OptimizeEmptyChildren",
    "Name": "OptimizeEmptyChildren",
    "Type": "SDK Method",
    "Summary": "Optimizes the empty children.",
    "Params": [
      {
        "Name": "item",
        "Type": "",
        "IsRequired": null,
        "Description": "The item."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 151
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.op_LessThanOrEqual(Geotab.Checkmate.ObjectModel.Id,Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.op_LessThanOrEqual",
    "Name": "op_LessThanOrEqual",
    "Type": "SDK Method",
    "Summary": "Implements the operator <=.",
    "Params": [
      {
        "Name": "id1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first."
      },
      {
        "Name": "id2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second."
      }
    ],
    "Example": "",
    "Returns": "The result of the operator.",
    "Score": 152
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.op_LessThan(Geotab.Checkmate.ObjectModel.Id,Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.op_LessThan",
    "Name": "op_LessThan",
    "Type": "SDK Method",
    "Summary": "Implements the operator <.",
    "Params": [
      {
        "Name": "id1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first."
      },
      {
        "Name": "id2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second."
      }
    ],
    "Example": "",
    "Returns": "The result of the operator.",
    "Score": 153
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.op_Inequality(Geotab.Checkmate.ObjectModel.Id,Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.op_Inequality",
    "Name": "op_Inequality",
    "Type": "SDK Method",
    "Summary": "Operator != the specified entity. Allows the(s) to be compared as value types.",
    "Params": [
      {
        "Name": "identifier1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first entity."
      },
      {
        "Name": "identifier2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second entity."
      }
    ],
    "Example": "",
    "Returns": "True if not equal; otherwise false.",
    "Score": 154
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.op_GreaterThanOrEqual(Geotab.Checkmate.ObjectModel.Id,Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.op_GreaterThanOrEqual",
    "Name": "op_GreaterThanOrEqual",
    "Type": "SDK Method",
    "Summary": "Implements the operator >=.",
    "Params": [
      {
        "Name": "id1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first."
      },
      {
        "Name": "id2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second."
      }
    ],
    "Example": "",
    "Returns": "The result of the operator.",
    "Score": 155
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.op_GreaterThan(Geotab.Checkmate.ObjectModel.Id,Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.op_GreaterThan",
    "Name": "op_GreaterThan",
    "Type": "SDK Method",
    "Summary": "Implements the operator >.",
    "Params": [
      {
        "Name": "id1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first."
      },
      {
        "Name": "id2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second."
      }
    ],
    "Example": "",
    "Returns": "The result of the operator.",
    "Score": 156
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.op_Equality(Geotab.Checkmate.ObjectModel.Id,Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.op_Equality",
    "Name": "op_Equality",
    "Type": "SDK Method",
    "Summary": "Operator == the specified entity. Allows the(s) to be compared as value types.",
    "Params": [
      {
        "Name": "identifier1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first entity."
      },
      {
        "Name": "identifier2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second entity."
      }
    ],
    "Example": "",
    "Returns": "True if equals; otherwise false.",
    "Score": 157
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.OlsonToMachineNoError(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.OlsonToMachineNoError",
    "Name": "OlsonToMachineNoError",
    "Type": "SDK Method",
    "Summary": "Converts an Olson Timezone id to the windows equivalent timezone, or if on linux just returns the same Olson Timezone id.",
    "Params": [
      {
        "Name": "olsonId",
        "Type": "",
        "IsRequired": null,
        "Description": "The olsonId."
      }
    ],
    "Example": "",
    "Returns": "null if the Olson timezone is not found.",
    "Score": 158
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.OlsonToMachine(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.OlsonToMachine",
    "Name": "OlsonToMachine",
    "Type": "SDK Method",
    "Summary": "Converts an Olson Timezone id to the windows equivalent timezone, or if on linux just returns the same Olson Timezone id.",
    "Params": [
      {
        "Name": "olsonId",
        "Type": "",
        "IsRequired": null,
        "Description": "An Olson Timezone ID."
      }
    ],
    "Example": "",
    "Returns": "A Olson Timezone ID. See: http://www.unicode.org/cldr/charts/latest/supplemental/zone_tzid.html or: http://www.unicode.org/cldr/charts/dev/supplemental/zone_tzid.html.",
    "Score": 159
  },
  {
    "FullNameWithParams": "M:Geotab.Drawing.RectangleF.Offset(Geotab.Drawing.PointF)",
    "FullName": "M:Geotab.Drawing.RectangleF.Offset",
    "Name": "Offset",
    "Type": "SDK Method",
    "Summary": "Gets a new rectangle that is offset from the current by the point p.",
    "Params": [
      {
        "Name": "p",
        "Type": "",
        "IsRequired": null,
        "Description": "The p."
      }
    ],
    "Example": "",
    "Returns": "The with offset applied.",
    "Score": 160
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.API.MultiCall(System.Object[])",
    "FullName": "M:Geotab.Checkmate.API.MultiCall",
    "Name": "MultiCall",
    "Type": "SDK Method",
    "Summary": "Make multiple calls (MultiCall) against the database using a single HTTP request. Each \"call\" must contain the return as the last index.",
    "Params": [
      {
        "Name": "arguments",
        "Type": "",
        "IsRequired": null,
        "Description": "A an array of object arrays contain call arguments and (if not otherwise specified)."
      }
    ],
    "Example": "",
    "Returns": "A list of.",
    "Score": 161
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.API.MultiCallAsync(System.Object[])",
    "FullName": "M:Geotab.Checkmate.API.MultiCallAsync",
    "Name": "MultiCall",
    "Type": "SDK Method",
    "Summary": "Make multiple calls (MultiCall) against the database using a single HTTP request. Each \"call\" must contain the return as the last index. This is an async call.",
    "Params": [
      {
        "Name": "arguments",
        "Type": "",
        "IsRequired": null,
        "Description": "A an array of object arrays contain call arguments and (if not otherwise specified)."
      }
    ],
    "Example": "",
    "Returns": "A list of.",
    "Score": 162
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.MetersToKm(System.Nullable{System.Double})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.MetersToKm",
    "Name": "MetersToKm",
    "Type": "SDK Method",
    "Summary": "Convert meters to km.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value in meters."
      }
    ],
    "Example": "",
    "Returns": "where T is A double representing kilometers.",
    "Score": 163
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.MetersToKm(System.Nullable{System.Single})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.MetersToKm",
    "Name": "MetersToKm",
    "Type": "SDK Method",
    "Summary": "Convert meters to km.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value in meters."
      }
    ],
    "Example": "",
    "Returns": "A float representing kilometers.",
    "Score": 164
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.MetersToKm(System.Single)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.MetersToKm",
    "Name": "MetersToKm",
    "Type": "SDK Method",
    "Summary": "Convert meters to km.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value in meters."
      }
    ],
    "Example": "",
    "Returns": "A float representing kilometers.",
    "Score": 165
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.CustomData.MergeData(Geotab.Checkmate.ObjectModel.CustomData,Geotab.Checkmate.ObjectModel.CustomDataSections,System.Byte[],System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.CustomData.MergeData",
    "Name": "MergeData",
    "Type": "SDK Method",
    "Summary": "false Merges the custom data sections into a custom data.",
    "Params": [
      {
        "Name": "customData",
        "Type": "",
        "IsRequired": null,
        "Description": "The custom data."
      },
      {
        "Name": "sections",
        "Type": "",
        "IsRequired": null,
        "Description": "The sections."
      },
      {
        "Name": "data",
        "Type": "",
        "IsRequired": null,
        "Description": "The data."
      },
      {
        "Name": "isSingleSectionData",
        "Type": "",
        "IsRequired": null,
        "Description": "if set to true if a single section data."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 166
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.MachineToOlson(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.MachineToOlson",
    "Name": "MachineToOlson",
    "Type": "SDK Method",
    "Summary": "Converts a machine's Timezone ID (Windows or Linux) to a Olson Timezone ID. This is a no-op on linux.",
    "Params": [
      {
        "Name": "machineId",
        "Type": "",
        "IsRequired": null,
        "Description": "A Machine Timezone ID."
      }
    ],
    "Example": "",
    "Returns": "A Olson Timezone id. See: http://www.unicode.org/cldr/charts/latest/supplemental/zone_tzid.html or: http://www.unicode.org/cldr/charts/dev/supplemental/zone_tzid.html.",
    "Score": 167
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.KmToMeters(System.Nullable{System.Double})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.KmToMeters",
    "Name": "KmToMeters",
    "Type": "SDK Method",
    "Summary": "Convert km to meters.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value in meters."
      }
    ],
    "Example": "",
    "Returns": "where T is A double representing meters.",
    "Score": 168
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.KmToMeters(System.Nullable{System.Single})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.KmToMeters",
    "Name": "KmToMeters",
    "Type": "SDK Method",
    "Summary": "Convert km to meters.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value in meters."
      }
    ],
    "Example": "",
    "Returns": "A float representing the number of kilometers.",
    "Score": 169
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.KmToMeters(System.Single)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.UnitOfMeasure.KmToMeters",
    "Name": "KmToMeters",
    "Type": "SDK Method",
    "Summary": "Convert km to meters.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value in meters."
      }
    ],
    "Example": "",
    "Returns": "A float representing the number of kilometers.",
    "Score": 170
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsZoneCondition(System.Nullable{Geotab.Checkmate.ObjectModel.Exceptions.ConditionType})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsZoneCondition",
    "Name": "IsZoneCondition",
    "Type": "SDK Method",
    "Summary": "Gets a boolean value indicating whether the is one of Zone related types.",
    "Params": [
      {
        "Name": "conditionType",
        "Type": "",
        "IsRequired": null,
        "Description": "The to check."
      }
    ],
    "Example": "",
    "Returns": "A boolean value or true or false.",
    "Score": 171
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.IsValidLongitude(System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.IsValidLongitude",
    "Name": "IsValidLongitude",
    "Type": "SDK Method",
    "Summary": "Checks if longitude value is within a valid range",
    "Params": [
      {
        "Name": "longitude",
        "Type": "",
        "IsRequired": null,
        "Description": "Longitude value"
      }
    ],
    "Example": "",
    "Returns": "Returns True if longitude value is within a valid range",
    "Score": 172
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.IsValidLatitude(System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.IsValidLatitude",
    "Name": "IsValidLatitude",
    "Type": "SDK Method",
    "Summary": "Checks if latitude value is within a valid range",
    "Params": [
      {
        "Name": "latitude",
        "Type": "",
        "IsRequired": null,
        "Description": "Latitude value"
      }
    ],
    "Example": "",
    "Returns": "Returns True if latitude value is within a valid range",
    "Score": 173
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Fuel.FuelTransaction.IsValidCoordinate(Geotab.Checkmate.ObjectModel.ISimpleCoordinate)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Fuel.FuelTransaction.IsValidCoordinate",
    "Name": "IsValidCoordinate",
    "Type": "SDK Method",
    "Summary": "Determines whether coordinate is in valid range.",
    "Params": [
      {
        "Name": "coordinate",
        "Type": "",
        "IsRequired": null,
        "Description": "The coordinate."
      }
    ],
    "Example": "",
    "Returns": "true if the coordinate is in valid range; otherwise, false.",
    "Score": 174
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.IsUS(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.IsUS",
    "Name": "IsUS",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified identifier is US.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The Timezone."
      }
    ],
    "Example": "",
    "Returns": "whether the specified Timezone is US.",
    "Score": 175
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.IsSystemId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.IsSystemId",
    "Name": "IsSystemId",
    "Type": "SDK Method",
    "Summary": "Determines whether the id is a system id.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "true if system id.",
    "Score": 176
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsSpeedLimitCondition(System.Nullable{Geotab.Checkmate.ObjectModel.Exceptions.ConditionType})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsSpeedLimitCondition",
    "Name": "IsSpeedLimitCondition",
    "Type": "SDK Method",
    "Summary": "Gets a boolean value indicating whether the is one of SpeedLimit related types.",
    "Params": [
      {
        "Name": "conditionType",
        "Type": "",
        "IsRequired": null,
        "Description": "The to check."
      }
    ],
    "Example": "",
    "Returns": "A boolean value or true or false.",
    "Score": 177
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.IsPolygon(System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.ISimpleCoordinate})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.IsPolygon",
    "Name": "IsPolygon",
    "Type": "SDK Method",
    "Summary": "Get whether this polygon is a properly formed polygon having the end point equal to the first point.",
    "Params": [
      {
        "Name": "feature",
        "Type": "",
        "IsRequired": null,
        "Description": "The feature."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 178
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.IsPasswordValidBasedOnLifetime(System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.IsPasswordValidBasedOnLifetime",
    "Name": "IsPasswordValidBasedOnLifetime",
    "Type": "SDK Method",
    "Summary": "Returns true if the user's password is valid only based on password lifetime only. If is null false will be returned.",
    "Params": [
      {
        "Name": "passwordDateTime",
        "Type": "",
        "IsRequired": null,
        "Description": "When the password was last changed."
      },
      {
        "Name": "lifetime",
        "Type": "",
        "IsRequired": null,
        "Description": "The lifetime from system settings."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 179
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.IsPasswordValid(System.Nullable{System.TimeSpan})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.IsPasswordValid",
    "Name": "IsPasswordValid",
    "Type": "SDK Method",
    "Summary": "Returns true if the user's password is valid - neither manually expired nor exceeded the system password lifetime.",
    "Params": [
      {
        "Name": "lifetime",
        "Type": "",
        "IsRequired": null,
        "Description": "The lifetime from system settings."
      }
    ],
    "Example": "",
    "Returns": "True if the user's password is still valid.",
    "Score": 180
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.IsOlson(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.IsOlson",
    "Name": "IsOlson",
    "Type": "SDK Method",
    "Summary": "Checks if the id is an Olson Timezone ID.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The Timezone Id."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 181
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsNoDVIRCheckConditionValid(Geotab.Checkmate.ObjectModel.Exceptions.Condition)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsNoDVIRCheckConditionValid",
    "Name": "IsNoDVIRCheckConditionValid",
    "Type": "SDK Method",
    "Summary": "Checks NoDVIRCheck structure.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The to check against."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 182
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.IoxAddOn.IsMimeIoxAddon(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.IoxAddOn.IsMimeIoxAddon",
    "Name": "IsMimeIoxAddon",
    "Type": "SDK Method",
    "Summary": "Determines whether the provided identifier is for an Iox Add-On and supports the Mime protocol. See .",
    "Params": [
      {
        "Name": "identifier",
        "Type": "",
        "IsRequired": null,
        "Description": "The identifier."
      }
    ],
    "Example": "",
    "Returns": "true if the identifier is for a Iox Add-On and supports the Mime protocol; otherwise, false.",
    "Score": 183
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsMeasurementCondition(System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsMeasurementCondition",
    "Name": "IsMeasurementCondition",
    "Type": "SDK Method",
    "Summary": "Gets a boolean value indicating whether the provided's output is a sequence of measurements or a sequence ofs.",
    "Params": [
      {
        "Name": "includeSpeedLimitTypes",
        "Type": "",
        "IsRequired": null,
        "Description": "Treat and related condition types as measurements producing."
      }
    ],
    "Example": "",
    "Returns": "The boolean value or true or false.",
    "Score": 184
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsMeasurementCondition(System.Nullable{Geotab.Checkmate.ObjectModel.Exceptions.ConditionType},System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.IsMeasurementCondition",
    "Name": "IsMeasurementCondition",
    "Type": "SDK Method",
    "Summary": "Gets a boolean value indicating whether the provided's output is a sequence of measurements or a sequence ofs.",
    "Params": [
      {
        "Name": "conditionType",
        "Type": "",
        "IsRequired": null,
        "Description": "The to check."
      },
      {
        "Name": "includeSpeedLimitTypes",
        "Type": "",
        "IsRequired": null,
        "Description": "Treat and related condition types as measurements producing."
      }
    ],
    "Example": "",
    "Returns": "The boolean value or true or false.",
    "Score": 185
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.IoxAddOn.IsIoxAddOn(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.IoxAddOn.IsIoxAddOn",
    "Name": "IsIoxAddOn",
    "Type": "SDK Method",
    "Summary": "Determines whether the provided identifier is for an Iox Add-On. See.",
    "Params": [
      {
        "Name": "identifier",
        "Type": "",
        "IsRequired": null,
        "Description": "The identifier."
      }
    ],
    "Example": "",
    "Returns": "true if the identifier is for a Iox Add-On; otherwise, false.",
    "Score": 186
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.IsIdNull(Geotab.Checkmate.ObjectModel.User)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.IsIdNull",
    "Name": "IsIdNull",
    "Type": "SDK Method",
    "Summary": "Checks whether the user or its id is null.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": ""
      }
    ],
    "Example": "",
    "Returns": "Whether the user's id is null",
    "Score": 187
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.RoutePlanItem.IsIdentical(Geotab.Checkmate.ObjectModel.RoutePlanItem,Geotab.Checkmate.ObjectModel.RoutePlanItem)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.RoutePlanItem.IsIdentical",
    "Name": "IsIdentical",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified item1 is identical.",
    "Params": [
      {
        "Name": "item1",
        "Type": "",
        "IsRequired": null,
        "Description": "The item1."
      },
      {
        "Name": "item2",
        "Type": "",
        "IsRequired": null,
        "Description": "The item2."
      }
    ],
    "Example": "",
    "Returns": "Whether the specified item1 is identical.",
    "Score": 188
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Group.IsChildOf(Geotab.Checkmate.ObjectModel.Group)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Group.IsChildOf",
    "Name": "IsChildOf",
    "Type": "SDK Method",
    "Summary": "Returns true if the current group is a child group of the given Group.",
    "Params": [
      {
        "Name": "group",
        "Type": "",
        "IsRequired": null,
        "Description": "The group being tested."
      }
    ],
    "Example": "",
    "Returns": "True if the current instance is a child of the given group, otherwise false.",
    "Score": 189
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Device.IsActive(System.Nullable{System.DateTime})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Device.IsActive",
    "Name": "IsActive",
    "Type": "SDK Method",
    "Summary": "Returns [true] if the device's was active on this date.",
    "Params": [
      {
        "Name": "date",
        "Type": "",
        "IsRequired": null,
        "Description": "The date."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 190
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Device.IsActive(System.Nullable{System.DateTime},System.Nullable{System.DateTime})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Device.IsActive",
    "Name": "IsActive",
    "Type": "SDK Method",
    "Summary": "Calculates if the device was active for a given date range.",
    "Params": [
      {
        "Name": "fromDate",
        "Type": "",
        "IsRequired": null,
        "Description": "The from date."
      },
      {
        "Name": "toDate",
        "Type": "",
        "IsRequired": null,
        "Description": "The to date."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 191
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.IntersectsWithPoly(System.Double,System.Double,System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.ISimpleCoordinate})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.IntersectsWithPoly",
    "Name": "IntersectsWithPoly",
    "Type": "SDK Method",
    "Summary": "Returns whether the polygon intersects with a specific x and y.",
    "Params": [
      {
        "Name": "x",
        "Type": "",
        "IsRequired": null,
        "Description": "The x-coordinate being tested for intersection."
      },
      {
        "Name": "y",
        "Type": "",
        "IsRequired": null,
        "Description": "The y-coordinate being tested for intersection."
      },
      {
        "Name": "simplePolygon",
        "Type": "",
        "IsRequired": null,
        "Description": "The list (the polygon) being tested for intersection."
      }
    ],
    "Example": "",
    "Returns": "true if the co-ordinate intersects with the polygon.",
    "Score": 192
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Zone.Intersects(System.Double,System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Zone.Intersects",
    "Name": "Intersects",
    "Type": "SDK Method",
    "Summary": "Determine whether the coordinate is inside the zone.",
    "Params": [
      {
        "Name": "lon",
        "Type": "",
        "IsRequired": null,
        "Description": "The longitude."
      },
      {
        "Name": "lat",
        "Type": "",
        "IsRequired": null,
        "Description": "The latitude."
      }
    ],
    "Example": "",
    "Returns": "If true, the coordinate is inside the zone.",
    "Score": 193
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.InfoFromOlsenId(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.InfoFromOlsenId",
    "Name": "InfoFromOlsenId",
    "Type": "SDK Method",
    "Summary": "Get a from an olsen id.",
    "Params": [
      {
        "Name": "olsenId",
        "Type": "",
        "IsRequired": null,
        "Description": "The olsen identifier."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 194
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FieldSelector.Includes(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FieldSelector.Includes",
    "Name": "Includes",
    "Type": "SDK Method",
    "Summary": "Determines whether this instance includes the field name.",
    "Params": [
      {
        "Name": "field",
        "Type": "",
        "IsRequired": null,
        "Description": "The field name."
      }
    ],
    "Example": "",
    "Returns": "true if includes the specified field; otherwise, false.",
    "Score": 195
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.HourIndexBefore(System.DateTime@)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.HourIndexBefore",
    "Name": "HourIndexBefore",
    "Type": "SDK Method",
    "Summary": "Calculates the last hourly data index before a point in time.",
    "Params": [
      {
        "Name": "toDate",
        "Type": "",
        "IsRequired": null,
        "Description": "The end time."
      }
    ],
    "Example": "",
    "Returns": "The last hourly data index before the end time. -1, if there is no such index.",
    "Score": 196
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.HasRuleMonitor(Geotab.Checkmate.ObjectModel.Exceptions.RuleMonitorType,Geotab.Checkmate.ObjectModel.Exceptions.MonitorPredicate)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.HasRuleMonitor",
    "Name": "HasRuleMonitor",
    "Type": "SDK Method",
    "Summary": "Determines whether this contains the specified and.",
    "Params": [
      {
        "Name": "monitorType",
        "Type": "",
        "IsRequired": null,
        "Description": "Rule Monitor Type"
      },
      {
        "Name": "monitorPredicate",
        "Type": "",
        "IsRequired": null,
        "Description": "Rule Monitor Predicate"
      }
    ],
    "Example": "",
    "Returns": "True if the rule has both and",
    "Score": 197
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.GroupSearch.GroupsToGroupSearches(System.Collections.Generic.ICollection{Geotab.Checkmate.ObjectModel.Group})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.GroupSearch.GroupsToGroupSearches",
    "Name": "GroupsToGroupSearches",
    "Type": "SDK Method",
    "Summary": "Convert a list of Groups by ID into a list of GroupSearch.",
    "Params": [
      {
        "Name": "groups",
        "Type": "",
        "IsRequired": null,
        "Description": "The list of GroupSearches by ID."
      }
    ],
    "Example": "",
    "Returns": "An array of GroupSearch.",
    "Score": 198
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.GroupSearch.GroupSearchsToGroups(System.Collections.Generic.ICollection{Geotab.Checkmate.ObjectModel.GroupSearch})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.GroupSearch.GroupSearchsToGroups",
    "Name": "GroupSearchsToGroups",
    "Type": "SDK Method",
    "Summary": "Convert a list of GroupSearch by ID into a list of Groups.",
    "Params": [
      {
        "Name": "groupSearches",
        "Type": "",
        "IsRequired": null,
        "Description": "The list of GroupSearches by ID."
      }
    ],
    "Example": "",
    "Returns": "An array of Groups.",
    "Score": 199
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.GetUnit(Geotab.Checkmate.ObjectModel.Exceptions.Condition)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.GetUnit",
    "Name": "GetUnit",
    "Type": "SDK Method",
    "Summary": "Gets the unit of a condition.",
    "Params": [
      {
        "Name": "condition",
        "Type": "",
        "IsRequired": null,
        "Description": "The condition."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 200
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Group.GetSystem(Geotab.Checkmate.ObjectModel.Id,System.String,Geotab.Checkmate.ObjectModel.Group,System.String,System.String,System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.SecurityFilter},System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.Group},System.String,System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Group.GetSystem",
    "Name": "GetSystem",
    "Type": "SDK Method",
    "Summary": "Gets the correct group given an id.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The identifier."
      },
      {
        "Name": "name",
        "Type": "",
        "IsRequired": null,
        "Description": "The name."
      },
      {
        "Name": "parent",
        "Type": "",
        "IsRequired": null,
        "Description": "The parent."
      },
      {
        "Name": "comments",
        "Type": "",
        "IsRequired": null,
        "Description": "The comments."
      },
      {
        "Name": "reference",
        "Type": "",
        "IsRequired": null,
        "Description": "The reference."
      },
      {
        "Name": "securityFilters",
        "Type": "",
        "IsRequired": null,
        "Description": "Security Filter for clearances"
      },
      {
        "Name": "children",
        "Type": "",
        "IsRequired": null,
        "Description": "The groups children"
      },
      {
        "Name": "path",
        "Type": "",
        "IsRequired": null,
        "Description": "Ltree path of the group"
      },
      {
        "Name": "embedded",
        "Type": "",
        "IsRequired": null,
        "Description": "Is the group embedded in another entity. Only id will be populated for embedded groups."
      }
    ],
    "Example": "",
    "Returns": "The new or null if this is not a system group",
    "Score": 201
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.FaultStatus.GetStateFromId(Geotab.Checkmate.ObjectModel.Id,System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.FaultStatus.GetStateFromId",
    "Name": "GetStateFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system FaultState from the provided system. In the case a match is missing, the default value will be FaultStateNone.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id of the FaultStatus."
      },
      {
        "Name": "isLegacy",
        "Type": "",
        "IsRequired": null,
        "Description": "Whether or not to return legacy FaultStates."
      }
    ],
    "Example": "",
    "Returns": "The.",
    "Score": 202
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Group.GetSlim(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Group.GetSlim",
    "Name": "GetSlim",
    "Type": "SDK Method",
    "Summary": "Gets the correct embedded group given an id.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The identifier."
      }
    ],
    "Example": "",
    "Returns": "The new",
    "Score": 203
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Group.GetSecurityClearance(Geotab.Checkmate.ObjectModel.Id,Geotab.Checkmate.ObjectModel.Group,System.String,System.String,System.String,System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.SecurityFilter},System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.Group},System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Group.GetSecurityClearance",
    "Name": "GetSecurityClearance",
    "Type": "SDK Method",
    "Summary": "Gets a new .",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The identifier."
      },
      {
        "Name": "parent",
        "Type": "",
        "IsRequired": null,
        "Description": "The parent."
      },
      {
        "Name": "name",
        "Type": "",
        "IsRequired": null,
        "Description": "The name."
      },
      {
        "Name": "comments",
        "Type": "",
        "IsRequired": null,
        "Description": "The comments."
      },
      {
        "Name": "reference",
        "Type": "",
        "IsRequired": null,
        "Description": "The reference."
      },
      {
        "Name": "securityFilters",
        "Type": "",
        "IsRequired": null,
        "Description": "Security Filter for clearances"
      },
      {
        "Name": "children",
        "Type": "",
        "IsRequired": null,
        "Description": "The groups children"
      },
      {
        "Name": "path",
        "Type": "",
        "IsRequired": null,
        "Description": "Ltree path of the group"
      }
    ],
    "Example": "",
    "Returns": "The new",
    "Score": 204
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.GetPostedRoadSpeedsForDeviceAsync(Geotab.Checkmate.Database.DataStore,Geotab.Checkmate.ObjectModel.DeviceSearch,System.Nullable{System.DateTime},System.Nullable{System.DateTime},Geotab.Checkmate.ObjectModel.PostedRoadSpeedOptions,System.Threading.CancellationToken)",
    "FullName": "M:CheckmateServer.Web.WebMethods.GetPostedRoadSpeedsForDeviceAsync",
    "Name": "GetPostedRoadSpeedsForDevice",
    "Type": "SDK Method",
    "Summary": "Get all posted road speed changes for a device's trips for the given dates. If the from date and to date are in the middle of the trip, the data for the whole trip are included.",
    "Params": [
      {
        "Name": "deviceSearch",
        "Type": "",
        "IsRequired": null,
        "Description": "Search for RoadMaxSpeeds with this. Available DeviceSearch options are:. Id"
      },
      {
        "Name": "fromDate",
        "Type": "",
        "IsRequired": null,
        "Description": "Search for maximum road speed limits that were encountered at this date or after."
      },
      {
        "Name": "toDate",
        "Type": "",
        "IsRequired": null,
        "Description": "Search for maximum road speed limits that were encountered at this date or before."
      },
      {
        "Name": "postedRoadSpeedOptions",
        "Type": "",
        "IsRequired": null,
        "Description": "Road data options"
      }
    ],
    "Example": "The following JavaScript example shows how to get maximum speed limits. var deviceName = prompt(\"Enter device name\"); api.call(\"Get\", { \"typeName\": \"Device\", \"search\": { name: \"%\" + deviceName + \"%\" } }, function(devices) { if (devices.length){ api.call(\"GetPostedRoadSpeedsForDevice\", { \"deviceSearch\": { id: devices[0].id }, \"fromDate\": (new Date((new Date()).getTime() - (1 * 24 * 60 * 60 * 1000))).toISOString(), \"toDate\": (new Date()).toISOString(), \"postedRoadSpeedOptions\": \"NoCommercial,NoEstimates\" }); } else { console.log(\"There are no devices with such name\"); } });",
    "Returns": "A list of objects.",
    "Score": 205
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.ColdChainFaultClearContent.GetOffset(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.ColdChainFaultClearContent.GetOffset",
    "Name": "GetOffset",
    "Type": "SDK Method",
    "Summary": "Gets offset amount for fault code based on controller protocol.",
    "Params": [
      {
        "Name": "controllerProtocol",
        "Type": "",
        "IsRequired": null,
        "Description": "Controller protocol for the refrigeration unit."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 206
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Device.GetObjectTypeFromDeviceType(System.Nullable{Geotab.Checkmate.ObjectModel.DeviceType})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Device.GetObjectTypeFromDeviceType",
    "Name": "GetObjectTypeFromDeviceType",
    "Type": "SDK Method",
    "Summary": "`Get the correct Device class the given product Id.",
    "Params": [
      {
        "Name": "deviceType",
        "Type": "",
        "IsRequired": null,
        "Description": "Type of the device."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 207
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.GetKnownIdByName(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.GetKnownIdByName",
    "Name": "GetKnownIdByName",
    "Type": "SDK Method",
    "Summary": "Gets the KnownId by name, that will also return the Guid associated with the Id.",
    "Params": [
      {
        "Name": "name",
        "Type": "",
        "IsRequired": null,
        "Description": "The name."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 208
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.GetKnownId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.GetKnownId",
    "Name": "GetKnownId",
    "Type": "SDK Method",
    "Summary": "Gets known representing the original value and returns it if found, otherwise returns original.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The."
      }
    ],
    "Example": "",
    "Returns": "The known or original.",
    "Score": 209
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.GetKnownGuidId(System.Guid@)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.GetKnownGuidId",
    "Name": "GetKnownGuidId",
    "Type": "SDK Method",
    "Summary": "Gets the known unique identifier.",
    "Params": [
      {
        "Name": "guid",
        "Type": "",
        "IsRequired": null,
        "Description": "The unique identifier."
      }
    ],
    "Example": "",
    "Returns": "The known.",
    "Score": 210
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.GetKnownGroupId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.GetKnownGroupId",
    "Name": "GetKnownGroupId",
    "Type": "SDK Method",
    "Summary": "Gets the singleton known id for a particular groups id or null if its not known.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id of the group being converted to a known id"
      }
    ],
    "Example": "",
    "Returns": "The known id or null",
    "Score": 211
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.GetIsMetricByTimeZone(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.GetIsMetricByTimeZone",
    "Name": "GetIsMetricByTimeZone",
    "Type": "SDK Method",
    "Summary": "Gets whether the country is metric by timezone.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The timezone identifier."
      }
    ],
    "Example": "",
    "Returns": "where T is.",
    "Score": 212
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.GetFuelEconomyUnitByTimeZone(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.GetFuelEconomyUnitByTimeZone",
    "Name": "GetFuelEconomyUnitByTimeZone",
    "Type": "SDK Method",
    "Summary": "Gets the default fuel economy unit for a Timezone.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The timezone identifier."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 213
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.DVIRLog.GetFilteredDefects(Geotab.Checkmate.ObjectModel.DefectSeverity)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.DVIRLog.GetFilteredDefects",
    "Name": "GetFilteredDefects",
    "Type": "SDK Method",
    "Summary": "false Filters the list attached to this instance with a minimum level. Will also check childs of anys if applicable.",
    "Params": [
      {
        "Name": "severityFilter",
        "Type": "",
        "IsRequired": null,
        "Description": "The minimum severity to allow past the filter."
      }
    ],
    "Example": "",
    "Returns": "Returns of all entries that passed the filter.",
    "Score": 214
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Tachograph.Files.TachographDataFile.GetFileNameFromFileFormatOrDefault(System.Nullable{Geotab.Checkmate.ObjectModel.EntitySettings.TachographFileFormat})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Tachograph.Files.TachographDataFile.GetFileNameFromFileFormatOrDefault",
    "Name": "GetFileNameFromFileFormatOrDefault",
    "Type": "SDK Method",
    "Summary": "Get FileName from TachographFileFormat or TGD as default.",
    "Params": [
      {
        "Name": "tachographFileFormat",
        "Type": "",
        "IsRequired": null,
        "Description": "The file format to get the file name from."
      }
    ],
    "Example": "",
    "Returns": "Get Filename from a Tachograph file format or default File format TGD.",
    "Score": 215
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.Database.DataStore.GetFeedAsync``1(Geotab.Checkmate.ObjectModel.Search,System.Nullable{System.Int64},System.Nullable{System.Int32},Geotab.Checkmate.ObjectModel.Credentials,Geotab.Checkmate.ObjectModel.PropertySelector,System.Threading.CancellationToken)",
    "FullName": "M:Geotab.Checkmate.Database.DataStore.GetFeedAsync``1",
    "Name": "GetFeedAsync``1",
    "Type": "SDK Method",
    "Summary": "This is the primary method used to sync data from the MyGeotab system for example all the GPS positions. The following entities are currently supported and must be set in the typeName. See and for Annotation Log related parameters. See and to provide a fromDate from which to seed the feed. See and for Charge Event related parameters. See and for Custom Data related parameters. See and for Debug Data related parameters. See *search not supported. Maximum results: 5,000. See *search not supported. See *search not supported. See *search not supported. See and to provide a fromDate from which to seed the feed. See and for Duty Status Log related parameters. See and for DVIR Log related parameters. See and for Exception Event related parameters. See and for Fault Data related parameters. See and for Fill Up related parameters. Maximum results: 10,000. See and for Fuel Tax Detail related parameters. See and for Fuel Used related parameters. See and for Iox Add-On related parameters. See and for Log Record related parameters. See *search not supported. Maximum results: 10,000. See and to provide a fromDate from which to seed the feed. Maximum results: 10,000. See (including ZoneStop) *search not supported. Maximum results: 10,000. See and for Shipment Log related parameters. See *search not supported. See and to provide a fromDate from which to seed the feed. See *search not supported. See and to provide a user, device, type or from timestamp date to seed the feed. See and for Trailer Attachment related parameters. See and for Trip related parameters. See (including) *search not supported. Maximum results: 5,000. See *search not supported. Maximum results: 10,000. This call is designed to allow incremental updates by returning a which contains the last version from the set of data returned. This return version is then used as the fromVersion argument for the next call. This guarantees that no changes in the data can be missed and that all data is consistently returned. It is important to understand that this feed call only returns changes in the data; so that at least one change must be received, otherwise the state is considered unknown. This call would typically be made every minute or more, to keep the data near real-time and up to date. Provide search parameters to limit the scope of the data being returned. In some rare circumstances old data in the system can be modified. If this happens, that old data is resent (with the changes) as it will have a newer version. In your design you must consider this. It may be required to provide an entity search using from date to \"back-fill\" or \"seed\" data from a date in the past. Providing a from date guarantees that the feed will start at a version with all entities that have a date greater than or equal to the date provided. However, it is possible that the feed will return entities before the provided date. Searching using from date should be used independent of fromVersion and only on the first request. Id based search will not be applied to the call. Any id passed as parameter will be ignored.",
    "Params": [
      {
        "Name": "search",
        "Type": "",
        "IsRequired": null,
        "Description": "The search object for the type of data to return. The properties of this object will be used to filter returned data. Providing a search parameter can have performance implications similar to using the Get method. See the type related search objects for more details."
      },
      {
        "Name": "fromVersion",
        "Type": "",
        "IsRequired": null,
        "Description": "Last retrieved version. All new data that has arrived after this version will be returned in this call, up to a maximum of resultsLimit data records. The returned by the feed method will contain the highest version for subsequent calls. When starting a new feed, if this value is not provided, the call will return only the toVersion (last version in the system). The start date can be specified in the search argument."
      },
      {
        "Name": "resultsLimit",
        "Type": "",
        "IsRequired": null,
        "Description": "The maximum number of records to return. The maximum value is 50,000 unless otherwise stated above, such as for User, Route, etc. If resultsLimit is not specified, the maximum value is used by default."
      },
      {
        "Name": "credentials",
        "Type": "",
        "IsRequired": null,
        "Description": "The."
      },
      {
        "Name": "propertySelector",
        "Type": "",
        "IsRequired": null,
        "Description": "The used to limit the properties retrieved from the server. >> Beta: not supported by all types."
      }
    ],
    "Example": "The following JavaScript example shows how to call GetFeed and return a list of status data. Note that it returns only the first 10 status data and after that another 10. let feed = (() => { let version = \"0000000000000000\"; return { next: success => { api.call(\"GetFeed\", { \"typeName\": \"StatusData\", \"resultsLimit\": 10, \"fromVersion\": version, }, result => { version = result.toVersion; success(result.data); }); } }; })(); feed.next(data => { console.log(\"First part: \", data); setTimeout(() => { feed.next(data => { console.log(\"Second part: \", data); }); }, 1000); });",
    "Returns": "A containing a list of all available data and the last version in the set returned by this call.",
    "Score": 216
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.FaultData.GetFaultStatusKnownId(System.Nullable{Geotab.Checkmate.ObjectModel.Engine.FaultState})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.FaultData.GetFaultStatusKnownId",
    "Name": "GetFaultStatusKnownId",
    "Type": "SDK Method",
    "Summary": "Returns a KnownId for FaultStatus from the provided system.",
    "Params": [
      {
        "Name": "faultState",
        "Type": "",
        "IsRequired": null,
        "Description": "The FaultState."
      }
    ],
    "Example": "",
    "Returns": "The Known.",
    "Score": 217
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.LogRecord.GetExtentsFromStartAndEndPoint(Geotab.Checkmate.ObjectModel.LogRecord,Geotab.Checkmate.ObjectModel.LogRecord,System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.LogRecord.GetExtentsFromStartAndEndPoint",
    "Name": "GetExtentsFromStartAndEndPoint",
    "Type": "SDK Method",
    "Summary": "Given a set of LogRecords, get two bounding boxes, one about the start of the set (based on time), same for the end of the set.",
    "Params": [
      {
        "Name": "firstRecord",
        "Type": "",
        "IsRequired": null,
        "Description": "The firstRecord."
      },
      {
        "Name": "lastRecord",
        "Type": "",
        "IsRequired": null,
        "Description": "The lastRecord."
      },
      {
        "Name": "boxSize",
        "Type": "",
        "IsRequired": null,
        "Description": "The area of the desired bounding boxes in kilometres squared"
      }
    ],
    "Example": "",
    "Returns": "The of containing two bounding boxes.",
    "Score": 218
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.LogRecord.GetExtent(System.Collections.Generic.IEnumerable{Geotab.Checkmate.ObjectModel.LogRecord})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.LogRecord.GetExtent",
    "Name": "GetExtent",
    "Type": "SDK Method",
    "Summary": "Calculates list representing an extent that fully covers the(s).",
    "Params": [
      {
        "Name": "logRecords",
        "Type": "",
        "IsRequired": null,
        "Description": "The log records."
      }
    ],
    "Example": "",
    "Returns": "The list.",
    "Score": 219
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Web.JsonRpcError.GetExceptionData(System.Exception)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Web.JsonRpcError.GetExceptionData",
    "Name": "GetExceptionData",
    "Type": "SDK Method",
    "Summary": "Gets the structured or unstructured information to provide context in the JSON-RPC error.",
    "Params": [
      {
        "Name": "exception",
        "Type": "",
        "IsRequired": null,
        "Description": "The exception."
      }
    ],
    "Example": "",
    "Returns": "The contextual information.",
    "Score": 220
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Web.JsonRpcError.GetErrorCode(System.Exception)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Web.JsonRpcError.GetErrorCode",
    "Name": "GetErrorCode",
    "Type": "SDK Method",
    "Summary": "Gets the error code.",
    "Params": [
      {
        "Name": "exception",
        "Type": "",
        "IsRequired": null,
        "Description": "The exception."
      }
    ],
    "Example": "",
    "Returns": "The numeric error code.",
    "Score": 221
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.GetDirectionsAsync(Geotab.Checkmate.Database.DataStore,System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.Geographical.Waypoint},System.Threading.CancellationToken)",
    "FullName": "M:CheckmateServer.Web.WebMethods.GetDirectionsAsync",
    "Name": "GetDirections",
    "Type": "SDK Method",
    "Summary": "Gets step-by-step driving for a sequence ofs including estimate travel time and distances.",
    "Params": [
      {
        "Name": "waypoints",
        "Type": "",
        "IsRequired": "required",
        "Description": "The set ofs."
      }
    ],
    "Example": "The following JavaScript example shows how to get directions for a sequence of waypoints. api.call(\"GetDirections\", { \"waypoints\" : [{ \"coordinate\" : { \"x\" : -79.38424129999999, \"y\" : 43.65411539999999 }, \"sequence\" : 0, \"description\": \"A\" }, { \"coordinate\" : { \"x\" : -79.38931020000001, \"y\" : 43.640473 }, \"sequence\" : 1, \"description\": \"B\" }, { \"coordinate\" : { \"x\" : -79.38424129999999, \"y\" : 43.65411539999999 }, \"sequence\" : 2, \"description\": \"C\" } ] }, function (result) { console.log(\"Done: \", result); }, function (e) { console.error(\"Failed:\", e); });",
    "Returns": "Step-by-step between thes.",
    "Score": 222
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Group.GetDefect(Geotab.Checkmate.ObjectModel.Id,Geotab.Checkmate.ObjectModel.Group,System.String,System.String,System.String,System.Nullable{Geotab.Checkmate.ObjectModel.DefectSeverity},System.Nullable{Geotab.Checkmate.ObjectModel.DefectAssetType},System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.Group},System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.Group},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Group.GetDefect",
    "Name": "GetDefect",
    "Type": "SDK Method",
    "Summary": "Gets a new .",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The identifier."
      },
      {
        "Name": "parent",
        "Type": "",
        "IsRequired": null,
        "Description": "The parent."
      },
      {
        "Name": "name",
        "Type": "",
        "IsRequired": null,
        "Description": "The name."
      },
      {
        "Name": "comments",
        "Type": "",
        "IsRequired": null,
        "Description": "The comments."
      },
      {
        "Name": "reference",
        "Type": "",
        "IsRequired": null,
        "Description": "The reference."
      },
      {
        "Name": "severity",
        "Type": "",
        "IsRequired": null,
        "Description": "Severity for a defect"
      },
      {
        "Name": "assetType",
        "Type": "",
        "IsRequired": null,
        "Description": "The asset type"
      },
      {
        "Name": "defectGroups",
        "Type": "",
        "IsRequired": null,
        "Description": "The defect groups"
      },
      {
        "Name": "children",
        "Type": "",
        "IsRequired": null,
        "Description": "The groups children"
      },
      {
        "Name": "path",
        "Type": "",
        "IsRequired": null,
        "Description": "Ltree path of the group"
      },
      {
        "Name": "isHidden",
        "Type": "",
        "IsRequired": null,
        "Description": "If the defect is visible in the UI"
      },
      {
        "Name": "isRequired",
        "Type": "",
        "IsRequired": null,
        "Description": "If the defect must be signed off in the UI"
      }
    ],
    "Example": "",
    "Returns": "The new",
    "Score": 223
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.GetDaylightSavingRulesAsync(System.String,System.Nullable{System.Int32})",
    "FullName": "M:CheckmateServer.Web.WebMethods.GetDaylightSavingRulesAsync",
    "Name": "GetDaylightSavingRules",
    "Type": "SDK Method",
    "Summary": "Get a Timezone's TimeZoneInfoWithRules by the timeZoneId.",
    "Params": [
      {
        "Name": "timeZoneId",
        "Type": "",
        "IsRequired": "required",
        "Description": "The ID of the."
      },
      {
        "Name": "minYear",
        "Type": "",
        "IsRequired": null,
        "Description": "Adjustment rules which end before minYear will not be returned. Default is 2000."
      }
    ],
    "Example": "The following JavaScript example shows how to get daylight saving rules for the given Timezone. Only rules that end on or after 2000 will be returned. api.call(\"GetDaylightSavingRules\", { \"timeZoneId\": \"America/Toronto\" }); The following JavaScript example uses minYear parameter to get all adjustment rules since 1990, overriding the default value of 2000. api.call(\"GetDaylightSavingRules\", { \"timeZoneId\": \"America/Toronto\", \"minYear\": 1990 });",
    "Returns": "The resulting collection.",
    "Score": 224
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.GetDateTimeFormatByTimeZone(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.GetDateTimeFormatByTimeZone",
    "Name": "GetDateTimeFormatByTimeZone",
    "Type": "SDK Method",
    "Summary": "Gets the date time format used by default for different Timezones.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The timezone identifier."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 225
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.GetDateTime(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.GetDateTime",
    "Name": "GetDateTime",
    "Type": "SDK Method",
    "Summary": "Calculates the time of an hourly data element.",
    "Params": [
      {
        "Name": "hourIndex",
        "Type": "",
        "IsRequired": null,
        "Description": "The hourly data index."
      }
    ],
    "Example": "",
    "Returns": "The time of the hourly data element.",
    "Score": 226
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.Database.DataStore.GetCountOfAsync``1(Geotab.Checkmate.ObjectModel.Search,System.Threading.CancellationToken)",
    "FullName": "M:Geotab.Checkmate.Database.DataStore.GetCountOfAsync``1",
    "Name": "GetCountOfAsync``1",
    "Type": "SDK Method",
    "Summary": "Gets the count of the specified type from the database. Entities that are currently inactive (the Entity's ActiveTo date is before the current time) are counted as well.",
    "Params": [
      {
        "Name": "search",
        "Type": "",
        "IsRequired": null,
        "Description": "The search object for the type of data to return the count of. The properties of this object will be used to filter the returned count. Only supported for search types:,,, and."
      }
    ],
    "Example": "The following JavaScript example shows how to get amount of entities of the given type (in this case Zones). api.call(\"GetCountOf\",{ \"typeName\": \"Zone\" });",
    "Returns": "The number of entities in the database.",
    "Score": 227
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.GetCoordinatesAsync(Geotab.Checkmate.Database.DataStore,System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)",
    "FullName": "M:CheckmateServer.Web.WebMethods.GetCoordinatesAsync",
    "Name": "GetCoordinates",
    "Type": "SDK Method",
    "Summary": "Geocodes or looks up the latitude and longitude from a list of addresses.",
    "Params": [
      {
        "Name": "addresses",
        "Type": "",
        "IsRequired": "required",
        "Description": "The formatted addresses in an array of (s)."
      }
    ],
    "Example": "The following JavaScript example shows how to get the Coordinates for a given list of Addresses. api.call(\"GetCoordinates\",{ \"addresses\":[\"New York City, NY, USA\"] });",
    "Returns": "The array of(s) for the address or null if it cannot be found.",
    "Score": 228
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.GetContinentByTimeZone(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TimeZoneInfo.GetContinentByTimeZone",
    "Name": "GetContinentByTimeZone",
    "Type": "SDK Method",
    "Summary": "Gets the continent of the Timezone.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The timezone identifier."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 229
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.GetCentroid(System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.ISimpleCoordinate})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.GetCentroid",
    "Name": "GetCentroid",
    "Type": "SDK Method",
    "Summary": "Get the centroid of collection of(s).",
    "Params": [
      {
        "Name": "coordinates",
        "Type": "",
        "IsRequired": null,
        "Description": "The coordinates."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 230
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.GetCalculatedExtent(System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.ISimpleCoordinate})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.GetCalculatedExtent",
    "Name": "GetCalculatedExtent",
    "Type": "SDK Method",
    "Summary": "Recalculate the extent of collection of.",
    "Params": [
      {
        "Name": "features",
        "Type": "",
        "IsRequired": null,
        "Description": "The features."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 231
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.GetBearing(Geotab.Checkmate.ObjectModel.ISimpleCoordinate,Geotab.Checkmate.ObjectModel.ISimpleCoordinate)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.GetBearing",
    "Name": "GetBearing",
    "Type": "SDK Method",
    "Summary": "Calculates a geographical bearing between two points.",
    "Params": [
      {
        "Name": "from",
        "Type": "",
        "IsRequired": null,
        "Description": "The origin coordinates."
      },
      {
        "Name": "to",
        "Type": "",
        "IsRequired": null,
        "Description": "The destination coordinates."
      }
    ],
    "Example": "",
    "Returns": "The bearing in degrees.",
    "Score": 232
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.Database.DataStore.GetAsync``1(Geotab.Checkmate.ObjectModel.Search,Geotab.Checkmate.ObjectModel.ISort,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},Geotab.Checkmate.ObjectModel.PropertySelector,System.Threading.CancellationToken)",
    "FullName": "M:Geotab.Checkmate.Database.DataStore.GetAsync``1",
    "Name": "GetAsync``1",
    "Type": "SDK Method",
    "Summary": "Gets the(s) for the given entityType. This method can be used in various ways to return all, one or some specific set of data for the(s).",
    "Params": [
      {
        "Name": "search",
        "Type": "",
        "IsRequired": null,
        "Description": "If null, all(s) are returned. Pass a Search object (ex.) with the Id property set if you need to return a specific entity. Pass a Search with properties set that needs to be searched on. For example, setting the Name property for a object will return only devices that match the name provided."
      },
      {
        "Name": "sort",
        "Type": "",
        "IsRequired": null,
        "Description": "Sort the result based on the sorting details."
      },
      {
        "Name": "resultsLimit",
        "Type": "",
        "IsRequired": null,
        "Description": "Limit the number of results that can be returned to this search."
      },
      {
        "Name": "minVersion",
        "Type": "",
        "IsRequired": null,
        "Description": "Only return entities with a version greater than this version."
      },
      {
        "Name": "maxVersion",
        "Type": "",
        "IsRequired": null,
        "Description": "Only return entities with a version less than or equal to this version."
      },
      {
        "Name": "propertySelector",
        "Type": "",
        "IsRequired": null,
        "Description": "The used to limit the properties retrieved from the server. >> Beta: not supported by all types."
      }
    ],
    "Example": "The following JavaScript example shows how to call Get and return a list of Devices. Note that it returns only the first 10 and the devices have to be active. api.call(\"Get\",{\"typeName\":\"Device\", \"resultsLimit\":10, \"search\":{ \"fromDate\":new Date().toISOString() }, \"propertySelector\": { \"fields\": [\"id\", \"name\"] } });",
    "Returns": "A of(s).",
    "Score": 233
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.ColdChainFaultClearContent.GetAlarmCode(System.Int32,System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.ColdChainFaultClearContent.GetAlarmCode",
    "Name": "GetAlarmCode",
    "Type": "SDK Method",
    "Summary": "Gets alarm code based on fault code and controller protocol.",
    "Params": [
      {
        "Name": "faultCode",
        "Type": "",
        "IsRequired": null,
        "Description": "Fault code to clear on IOX device."
      },
      {
        "Name": "controllerProtocol",
        "Type": "",
        "IsRequired": null,
        "Description": "Controller protocol for the refrigeration unit."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 234
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.GetAddressesAsync(Geotab.Checkmate.Database.DataStore,System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.Coordinate},System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)",
    "FullName": "M:CheckmateServer.Web.WebMethods.GetAddressesAsync",
    "Name": "GetAddresses",
    "Type": "SDK Method",
    "Summary": "Gets addresses from the list of(s), as well as any s in the system that contain the given coordinates.",
    "Params": [
      {
        "Name": "coordinates",
        "Type": "",
        "IsRequired": "required",
        "Description": "The array of(s)."
      },
      {
        "Name": "movingAddresses",
        "Type": "",
        "IsRequired": null,
        "Description": "The default is false and is used for static/immobile addresses. When set to true, the coordinates are being specified for a moving object. The parameter should be set true if it is known that the object being tracked has a speed."
      },
      {
        "Name": "hosAddresses",
        "Type": "",
        "IsRequired": null,
        "Description": "The default is false and is used for ELD compliant addresses. When set to true we will return the direction and distance to the nearest city with a population greater than 5000."
      },
      {
        "Name": "isMetric",
        "Type": "",
        "IsRequired": null,
        "Description": "The default is null and is used when hosAddresses is true. The addresses will be returned with metric distance units if true, and imperial distance units if false. If null, the user's isMetric setting is used."
      }
    ],
    "Example": "The following JavaScript example shows how to get the Addresses for a given list of coordinates. api.call(\"GetAddresses\",{ \"coordinates\":[{\"x\":\"25.856667\", \"y\":\" -17.924444\"}], \"movingAddresses\":true });",
    "Returns": "A list of populated(s).",
    "Score": 235
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Group.Get(Geotab.Checkmate.ObjectModel.Id,Geotab.Checkmate.ObjectModel.Group,System.String,System.String,System.String,Geotab.Drawing.Color,System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.Group},System.String,System.Nullable{System.Boolean})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Group.Get",
    "Name": "Get",
    "Type": "SDK Method",
    "Summary": "Gets the correct group given an id.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The identifier."
      },
      {
        "Name": "parent",
        "Type": "",
        "IsRequired": null,
        "Description": "The parent."
      },
      {
        "Name": "name",
        "Type": "",
        "IsRequired": null,
        "Description": "The name."
      },
      {
        "Name": "comments",
        "Type": "",
        "IsRequired": null,
        "Description": "The comments."
      },
      {
        "Name": "reference",
        "Type": "",
        "IsRequired": null,
        "Description": "The reference."
      },
      {
        "Name": "color",
        "Type": "",
        "IsRequired": null,
        "Description": "The color."
      },
      {
        "Name": "children",
        "Type": "",
        "IsRequired": null,
        "Description": "The groups children."
      },
      {
        "Name": "path",
        "Type": "",
        "IsRequired": null,
        "Description": "Ltree path of the group."
      },
      {
        "Name": "isGlobalReportingGroup",
        "Type": "",
        "IsRequired": null,
        "Description": "Indicates if the group is global for reporting."
      }
    ],
    "Example": "",
    "Returns": "The new",
    "Score": 236
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.PropertySelector.Get(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.PropertySelector.Get",
    "Name": "Get",
    "Type": "SDK Method",
    "Summary": "Initializes a new instance of the class.",
    "Params": [
      {
        "Name": "fields",
        "Type": "",
        "IsRequired": null,
        "Description": "The field names to include or exclude from the result."
      },
      {
        "Name": "isIncluded",
        "Type": "",
        "IsRequired": null,
        "Description": "A value indicating whether the are to be included or excluded."
      },
      {
        "Name": "isStaticFields",
        "Type": "",
        "IsRequired": null,
        "Description": "A value indicating whether the are to be immutable or not."
      }
    ],
    "Example": "",
    "Returns": "The instance.",
    "Score": 237
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.ColdChainFaultClearContent.GenerateEncodedMessage(System.Int32,System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.ColdChainFaultClearContent.GenerateEncodedMessage",
    "Name": "GenerateEncodedMessage",
    "Type": "SDK Method",
    "Summary": "Generates base 64 byte encoded message for clearing faults",
    "Params": [
      {
        "Name": "faultCode",
        "Type": "",
        "IsRequired": null,
        "Description": "Fault code to clear on IOX device."
      },
      {
        "Name": "controllerProtocol",
        "Type": "",
        "IsRequired": null,
        "Description": "Controller protocol for the refrigeration unit."
      }
    ],
    "Example": "",
    "Returns": "Array of",
    "Score": 238
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.ColdChainSetpointSetContent.GenerateEncodedMessage(System.Int32,System.Int32,System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.ColdChainSetpointSetContent.GenerateEncodedMessage",
    "Name": "GenerateEncodedMessage",
    "Type": "SDK Method",
    "Summary": "Generates base 64 byte encoded message for adjusting the setpoint temperature",
    "Params": [
      {
        "Name": "temperatureZone",
        "Type": "",
        "IsRequired": null,
        "Description": "Temperature Zone to adjust setpoint on IOX device."
      },
      {
        "Name": "temperature",
        "Type": "",
        "IsRequired": null,
        "Description": "The temperature to set the setpoint to."
      },
      {
        "Name": "controllerProtocol",
        "Type": "",
        "IsRequired": null,
        "Description": "Controller protocol for the refrigeration unit."
      }
    ],
    "Example": "",
    "Returns": "Array of",
    "Score": 239
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.GenerateCaptcha(System.Guid)",
    "FullName": "M:CheckmateServer.Web.WebMethods.GenerateCaptcha",
    "Name": "GenerateCaptcha",
    "Type": "SDK Method",
    "Summary": "Generates a single use CAPTCHA image for the given key and serves the result as \"image/png\" content.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": "required",
        "Description": "The globally unique id used to identify the CAPTCHA image returned."
      }
    ],
    "Example": "The following JavaScript example shows how to generate a new CAPTCHA. var generateGUID = function(){ return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8); return v.toString(16); }); }; var captcha = new Image(); captcha.src = \"/apiv1/GenerateCaptcha?id=\" + generateGUID(); document.body.appendChild(captcha);",
    "Returns": "Serves a jpeg CAPTCHA image with content type \"image/png\". If they key is not unique, returns HTTP status code 409 (Conflict).",
    "Score": 240
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Device.FromSerialNumber(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Device.FromSerialNumber",
    "Name": "FromSerialNumber",
    "Type": "SDK Method",
    "Summary": "Returns the correct type of device for the given serial number.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The serial number for the device. For example, GV-001-000-0000."
      }
    ],
    "Example": "",
    "Returns": "An instance of a object that corresponds to the serial number provided.",
    "Score": 241
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Device.FromProductId(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Device.FromProductId",
    "Name": "FromProductId",
    "Type": "SDK Method",
    "Summary": "Get the correct Device object from the given product Id.",
    "Params": [
      {
        "Name": "productId",
        "Type": "",
        "IsRequired": null,
        "Description": "The product identifier."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 242
  },
  {
    "FullNameWithParams": "M:Geotab.Drawing.RectangleF.FromLtrb(System.Single,System.Single,System.Single,System.Single)",
    "FullName": "M:Geotab.Drawing.RectangleF.FromLtrb",
    "Name": "FromLtrb",
    "Type": "SDK Method",
    "Summary": "Gets a rectangle from left top right bottom.",
    "Params": [
      {
        "Name": "left",
        "Type": "",
        "IsRequired": null,
        "Description": "The left."
      },
      {
        "Name": "top",
        "Type": "",
        "IsRequired": null,
        "Description": "The top."
      },
      {
        "Name": "right",
        "Type": "",
        "IsRequired": null,
        "Description": "The right."
      },
      {
        "Name": "bottom",
        "Type": "",
        "IsRequired": null,
        "Description": "The bottom."
      }
    ],
    "Example": "",
    "Returns": "The.",
    "Score": 243
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Web.JsonRpcError.FromException(System.Exception,System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Web.JsonRpcError.FromException",
    "Name": "FromException",
    "Type": "SDK Method",
    "Summary": "Gets a JSON-RPC error from an exception.",
    "Params": [
      {
        "Name": "exception",
        "Type": "",
        "IsRequired": null,
        "Description": "The to include in the error."
      },
      {
        "Name": "returnException",
        "Type": "",
        "IsRequired": null,
        "Description": "Always return the exception"
      }
    ],
    "Example": "",
    "Returns": "A populated JSON-RPC error.",
    "Score": 244
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Device.FromDeviceType(Geotab.Checkmate.ObjectModel.DeviceType)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Device.FromDeviceType",
    "Name": "FromDeviceType",
    "Type": "SDK Method",
    "Summary": "Gets the object type that matches a",
    "Params": [
      {
        "Name": "deviceType",
        "Type": "",
        "IsRequired": null,
        "Description": "The deviceType."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 245
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Captcha.CaptchaException.FormatMessageWithAssessmentId(System.String,System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Captcha.CaptchaException.FormatMessageWithAssessmentId",
    "Name": "FormatMessageWithAssessmentId",
    "Type": "SDK Method",
    "Summary": "Formats the message to include the assessmentId if it is provided. Including assessmentId is useful for manually training Recapatcha service to ignore false positives.",
    "Params": [
      {
        "Name": "message",
        "Type": "",
        "IsRequired": null,
        "Description": "The message that describes the error."
      },
      {
        "Name": "assessmentId",
        "Type": "",
        "IsRequired": null,
        "Description": "The id of the assessment."
      }
    ],
    "Example": "",
    "Returns": "A formatted error message that includes the assessmentId if it was provided.",
    "Score": 246
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.FindConditions(Geotab.Checkmate.ObjectModel.Exceptions.ConditionType[])",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.FindConditions",
    "Name": "FindConditions",
    "Type": "SDK Method",
    "Summary": "Finds all conditions in the rule true that are of a particular list of kinds.",
    "Params": [
      {
        "Name": "conditionKinds",
        "Type": "",
        "IsRequired": null,
        "Description": "The condition kinds."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 247
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.FindCondition(Geotab.Checkmate.ObjectModel.Exceptions.Condition,Geotab.Checkmate.ObjectModel.Exceptions.ConditionType)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.FindCondition",
    "Name": "FindCondition",
    "Type": "SDK Method",
    "Summary": "Breadth First Search for the first occurance of a rule's condition",
    "Params": [
      {
        "Name": "rootCondition",
        "Type": "",
        "IsRequired": null,
        "Description": "The rule condition."
      },
      {
        "Name": "conditionType",
        "Type": "",
        "IsRequired": null,
        "Description": "The condition type being searched."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 248
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.ExceptionEventState.ExceptionEventStateFromKey(System.Nullable{System.Int16})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.ExceptionEventState.ExceptionEventStateFromKey",
    "Name": "ExceptionEventStateFromKey",
    "Type": "SDK Method",
    "Summary": "Returns a ExceptionEventState from the provided else Valid if it is not an existing ExceptionEventState.",
    "Params": [
      {
        "Name": "key",
        "Type": "",
        "IsRequired": null,
        "Description": "The key."
      }
    ],
    "Example": "",
    "Returns": "The.",
    "Score": 249
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.ExceptionEventState.ExceptionEventStateFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.ExceptionEventState.ExceptionEventStateFromId",
    "Name": "ExceptionEventStateFromId",
    "Type": "SDK Method",
    "Summary": "Returns a ExceptionEventState from the provided else Valid if it is not an existing ExceptionEventState.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "The.",
    "Score": 250
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.ApplicationVersionInformation.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.ApplicationVersionInformation.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified, is equal to this instance.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to this instance; otherwise, false.",
    "Score": 251
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified object is equal to the current object.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The object to compare with the current object."
      }
    ],
    "Example": "",
    "Returns": "true if the specified object is equal to the current object; otherwise, false.",
    "Score": 252
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Credentials.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Credentials.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 253
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.DataEnrichment.DeviceSourceAddressInfo.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.DataEnrichment.DeviceSourceAddressInfo.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 254
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.DataToComponentContent.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.DataToComponentContent.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 255
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.ParameterGroup.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.ParameterGroup.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Compares two objects and returns whether they are equal or not.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "Object to compare to."
      }
    ],
    "Example": "",
    "Returns": "Whether two objects are equal or not.",
    "Score": 256
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Engine.Source.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Engine.Source.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified is equal to the current .",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with the current."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to the current ; otherwise, false.",
    "Score": 257
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Entity.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Entity.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified, is equal to this instance.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to this instance; otherwise, false.",
    "Score": 258
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Fuel.FillUpExtrema.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Fuel.FillUpExtrema.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 259
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Fuel.FillUpExtremum.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Fuel.FillUpExtremum.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 260
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Fuel.FuelTankCapacity.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Fuel.FuelTankCapacity.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 261
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Geographical.Waypoint.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Geographical.Waypoint.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified, is equal to this instance.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to this instance; otherwise, false.",
    "Score": 262
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.GroupRelations.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.GroupRelations.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified, is equal to this instance.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to this instance; otherwise, false.",
    "Score": 263
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 264
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.LocationContent.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.LocationContent.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified, is equal to this instance.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to this instance; otherwise, false.",
    "Score": 265
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.MimeContent.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.MimeContent.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 266
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.SecurityFilter.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.SecurityFilter.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified is equal to the current .",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with the current."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to the current ; otherwise, false.",
    "Score": 267
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.TextContent.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.TextContent.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified, is equal to this instance.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to this instance; otherwise, false.",
    "Score": 268
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.VersionInformation.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.VersionInformation.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified, is equal to this instance.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to this instance; otherwise, false.",
    "Score": 269
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.Settings.MapView.Equals(System.Object)",
    "FullName": "M:Geotab.Checkmate.Settings.MapView.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified is equal to the current .",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with the current."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to the current ; otherwise, false.",
    "Score": 270
  },
  {
    "FullNameWithParams": "M:Geotab.Drawing.Color.Equals(System.Object)",
    "FullName": "M:Geotab.Drawing.Color.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 271
  },
  {
    "FullNameWithParams": "M:Geotab.Drawing.PointF.Equals(System.Object)",
    "FullName": "M:Geotab.Drawing.PointF.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified, is equal to this instance.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to this instance; otherwise, false.",
    "Score": 272
  },
  {
    "FullNameWithParams": "M:Geotab.Drawing.RectangleF.Equals(System.Object)",
    "FullName": "M:Geotab.Drawing.RectangleF.Equals",
    "Name": "Equals",
    "Type": "SDK Method",
    "Summary": "Determines whether the specified, is equal to this instance.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "The to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "true if the specified is equal to this instance; otherwise, false.",
    "Score": 273
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.Equal(Geotab.Checkmate.ObjectModel.Exceptions.Condition,Geotab.Checkmate.ObjectModel.Exceptions.Condition)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.Equal",
    "Name": "Equal",
    "Type": "SDK Method",
    "Summary": "Compares two condtions for special kind of equality. It looks for similar condition tree structure and relevant properties value.",
    "Params": [
      {
        "Name": "rootCondition1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first condition."
      },
      {
        "Name": "rootCondition2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second condition."
      }
    ],
    "Example": "",
    "Returns": "Equality result as a boolean.",
    "Score": 274
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Driver.DriverSystemFromId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Driver.DriverSystemFromId",
    "Name": "DriverSystemFromId",
    "Type": "SDK Method",
    "Summary": "Returns a system Driver from the provided system else null if its a not a system Driver.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The id."
      }
    ],
    "Example": "",
    "Returns": "The.",
    "Score": 275
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.DownloadMediaFileAsync(Microsoft.AspNetCore.Http.HttpContext,Geotab.Checkmate.Database.DataStore,Geotab.Checkmate.ObjectModel.Files.MediaFile,System.Threading.CancellationToken)",
    "FullName": "M:CheckmateServer.Web.WebMethods.DownloadMediaFileAsync",
    "Name": "DownloadMediaFile",
    "Type": "SDK Method",
    "Summary": "Download a file for the given. The Content-Type is determined by the file extension. Range headers are supported.",
    "Params": [
      {
        "Name": "mediaFile",
        "Type": "",
        "IsRequired": "required",
        "Description": "The of which to add the file for."
      }
    ],
    "Example": "",
    "Returns": "The file stream of the given content-type.",
    "Score": 276
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.API.DownloadAsync(System.IO.Stream,Geotab.Checkmate.ObjectModel.Files.MediaFile,System.Threading.CancellationToken)",
    "FullName": "M:Geotab.Checkmate.API.DownloadAsync",
    "Name": "Download",
    "Type": "SDK Method",
    "Summary": "Make an API call using generic type method to Download a stream of data.",
    "Params": [
      {
        "Name": "outputStream",
        "Type": "",
        "IsRequired": "required",
        "Description": "The to write downloaded binary data to."
      },
      {
        "Name": "mediaFile",
        "Type": "",
        "IsRequired": "required",
        "Description": "The corresponding to the file to download."
      }
    ],
    "Example": "",
    "Returns": "A completed result.",
    "Score": 277
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.LogRecord.DistanceTo(Geotab.Checkmate.ObjectModel.LogRecord)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.LogRecord.DistanceTo",
    "Name": "DistanceTo",
    "Type": "SDK Method",
    "Summary": "Calculates the distance between two lat/long points in kilometers.",
    "Params": [
      {
        "Name": "logRecord",
        "Type": "",
        "IsRequired": null,
        "Description": ""
      }
    ],
    "Example": "",
    "Returns": "Result in kilometers.",
    "Score": 278
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.LogRecord.DistanceTo(Geotab.Checkmate.ObjectModel.ISimpleCoordinate)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.LogRecord.DistanceTo",
    "Name": "DistanceTo",
    "Type": "SDK Method",
    "Summary": "Calculates the distance between two lat/long points in kilometers.",
    "Params": [
      {
        "Name": "coordinate",
        "Type": "",
        "IsRequired": null,
        "Description": ""
      }
    ],
    "Example": "",
    "Returns": "Result in kilometers.",
    "Score": 279
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.DistanceFromPoly(System.Double,System.Double,System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.ISimpleCoordinate})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.DistanceFromPoly",
    "Name": "DistanceFromPoly",
    "Type": "SDK Method",
    "Summary": "The distance from the closest polygon's border to the point.",
    "Params": [
      {
        "Name": "x",
        "Type": "",
        "IsRequired": null,
        "Description": "The origin's x-coordinate."
      },
      {
        "Name": "y",
        "Type": "",
        "IsRequired": null,
        "Description": "The origin's y-coordinate."
      },
      {
        "Name": "simplePolygon",
        "Type": "",
        "IsRequired": null,
        "Description": "The list represents the polygon."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 280
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.DistanceFrom(Geotab.Checkmate.ObjectModel.ISimpleCoordinate)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.DistanceFrom",
    "Name": "DistanceFrom",
    "Type": "SDK Method",
    "Summary": "Returns the distance between this point and the supplied point in meters.",
    "Params": [
      {
        "Name": "coordinate",
        "Type": "",
        "IsRequired": null,
        "Description": "The being checked for distance."
      }
    ],
    "Example": "",
    "Returns": "The distance.",
    "Score": 281
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Zone.DistanceFrom(System.Double,System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Zone.DistanceFrom",
    "Name": "DistanceFrom",
    "Type": "SDK Method",
    "Summary": "Gets the distance from this zone's closest border to the point in meters. If the point is inside, the distance is 0.",
    "Params": [
      {
        "Name": "lon",
        "Type": "",
        "IsRequired": null,
        "Description": "The longitude."
      },
      {
        "Name": "lat",
        "Type": "",
        "IsRequired": null,
        "Description": "The latitude."
      }
    ],
    "Example": "",
    "Returns": "The minimum distance to the border.",
    "Score": 282
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.LogRecord.DistanceBetweenPoints(System.Double,System.Double,System.Double,System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.LogRecord.DistanceBetweenPoints",
    "Name": "DistanceBetweenPoints",
    "Type": "SDK Method",
    "Summary": "Calculates the distance between two lat/long points, returns result in kilometers Formula from www.best.com/~williams/avform.htm.",
    "Params": [
      {
        "Name": "longitudeA",
        "Type": "",
        "IsRequired": null,
        "Description": "The longitude a."
      },
      {
        "Name": "latitudeA",
        "Type": "",
        "IsRequired": null,
        "Description": "The latitude a."
      },
      {
        "Name": "longitudeB",
        "Type": "",
        "IsRequired": null,
        "Description": "The longitude b."
      },
      {
        "Name": "latitudeB",
        "Type": "",
        "IsRequired": null,
        "Description": "The latitude b."
      }
    ],
    "Example": "",
    "Returns": "The distance.",
    "Score": 283
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.DistanceBetween(System.Double,System.Double,System.Double,System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.DistanceBetween",
    "Name": "DistanceBetween",
    "Type": "SDK Method",
    "Summary": "Returns the distance between this point and the supplied point.",
    "Params": [
      {
        "Name": "x1",
        "Type": "",
        "IsRequired": null,
        "Description": "The fist x coordinate (longitude)."
      },
      {
        "Name": "y1",
        "Type": "",
        "IsRequired": null,
        "Description": "The fist y coordinate (latitude)."
      },
      {
        "Name": "x2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second x coordinate (longitude)."
      },
      {
        "Name": "y2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second y coordinate (latitude)."
      }
    ],
    "Example": "",
    "Returns": "The distance.",
    "Score": 284
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Device.DeviceTypeFromProductId(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Device.DeviceTypeFromProductId",
    "Name": "DeviceTypeFromProductId",
    "Type": "SDK Method",
    "Summary": "`Maps the given productId to a.",
    "Params": [
      {
        "Name": "productId",
        "Type": "",
        "IsRequired": null,
        "Description": "The device product Id."
      }
    ],
    "Example": "",
    "Returns": "The.",
    "Score": 285
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.DestinationCoordinateGivenDistanceBearingAndStartingPoint(System.Double,System.Double,System.Int32,System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.DestinationCoordinateGivenDistanceBearingAndStartingPoint",
    "Name": "DestinationCoordinateGivenDistanceBearingAndStartingPoint",
    "Type": "SDK Method",
    "Summary": "Calculates a new based off of an origin coordinate, bearing in degrees, and linear distance.",
    "Params": [
      {
        "Name": "x",
        "Type": "",
        "IsRequired": null,
        "Description": "The x."
      },
      {
        "Name": "y",
        "Type": "",
        "IsRequired": null,
        "Description": "The y."
      },
      {
        "Name": "bearing",
        "Type": "",
        "IsRequired": null,
        "Description": "The bearing."
      },
      {
        "Name": "distance",
        "Type": "",
        "IsRequired": null,
        "Description": "The distance."
      }
    ],
    "Example": "",
    "Returns": "New instance of",
    "Score": 286
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.XDevice.DegreesToByte(System.Int32)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.XDevice.DegreesToByte",
    "Name": "DegreesToByte",
    "Type": "SDK Method",
    "Summary": "Converts Degrees to byte.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      }
    ],
    "Example": "",
    "Returns": "The byte representation of the direction.",
    "Score": 287
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.BinaryData.DecompressBinary(System.Byte[])",
    "FullName": "M:Geotab.Checkmate.ObjectModel.BinaryData.DecompressBinary",
    "Name": "DecompressBinary",
    "Type": "SDK Method",
    "Summary": "Decompresses binary data of engine serial number, software version, and calibration ID types. See 7-bit compression in: https://docs.google.com/document/d/1D8P-j-0Aa6unXBhN-EETlCaWK7K_OFMRGoq2H-_2G64/edit#.",
    "Params": [
      {
        "Name": "compressedData",
        "Type": "",
        "IsRequired": null,
        "Description": "The compressed data."
      }
    ],
    "Example": "",
    "Returns": "byte array.",
    "Score": 288
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.CreateKnownNullId(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.CreateKnownNullId",
    "Name": "CreateKnownNullId",
    "Type": "SDK Method",
    "Summary": "Creates the known identifier.",
    "Params": [
      {
        "Name": "fieldName",
        "Type": "",
        "IsRequired": null,
        "Description": "Name of the instance."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 289
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.CreateKnownLongId(System.String,System.Int64)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.CreateKnownLongId",
    "Name": "CreateKnownLongId",
    "Type": "SDK Method",
    "Summary": "Creates the known identifier.",
    "Params": [
      {
        "Name": "fieldName",
        "Type": "",
        "IsRequired": null,
        "Description": "Name of the instance."
      },
      {
        "Name": "key",
        "Type": "",
        "IsRequired": null,
        "Description": "The key."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 290
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.CreateKnownId``1(``0)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.CreateKnownId``1",
    "Name": "CreateKnownId``1",
    "Type": "SDK Method",
    "Summary": "Creates the known identifier from referentially unique instance.",
    "Params": [
      {
        "Name": "knownId",
        "Type": "",
        "IsRequired": null,
        "Description": "The referentially unique instance."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 291
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.KnownId.CreateKnownGuidId(System.String,System.Guid@)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.KnownId.CreateKnownGuidId",
    "Name": "CreateKnownGuidId",
    "Type": "SDK Method",
    "Summary": "Creates the known identifier.",
    "Params": [
      {
        "Name": "fieldName",
        "Type": "",
        "IsRequired": null,
        "Description": "Name of the instance."
      },
      {
        "Name": "guid",
        "Type": "",
        "IsRequired": null,
        "Description": "The Guid."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 292
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Credentials.CreateDatabaseNameFromCompany(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Credentials.CreateDatabaseNameFromCompany",
    "Name": "CreateDatabaseNameFromCompany",
    "Type": "SDK Method",
    "Summary": "Creates the database name from supplied company. Honours certain rules about naming databases.",
    "Params": [
      {
        "Name": "companyName",
        "Type": "",
        "IsRequired": null,
        "Description": "Name of the company."
      }
    ],
    "Example": "",
    "Returns": "Sanitized company name.",
    "Score": 293
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.CreateDatabaseAsync(Microsoft.AspNetCore.Http.HttpContext,Geotab.Checkmate.ObjectModel.Captcha.CaptchaAnswer,System.String,System.String,System.String,Geotab.Checkmate.ObjectModel.Registration.CompanyDetails,System.Threading.CancellationToken,Geotab.Checkmate.ObjectModel.Demonstration.DemoConfiguration)",
    "FullName": "M:CheckmateServer.Web.WebMethods.CreateDatabaseAsync",
    "Name": "CreateDatabase",
    "Type": "SDK Method",
    "Summary": "Creates new uniquely named database on a server in the federation. Requires either a valid CaptchaAnswer and/or valid MyAdmin user credentials. See https://github.com/Geotab/sample-registration for an example.",
    "Params": [
      {
        "Name": "captchaAnswer",
        "Type": "",
        "IsRequired": null,
        "Description": "A valid. This includes the Id used to generate a CAPTCHA image and the answer."
      },
      {
        "Name": "database",
        "Type": "",
        "IsRequired": "required",
        "Description": "The database name (short company name with the demo_ prefix). Spaces and non alphanumeric characters will be converted to the underscore character. Maximum 58 characters."
      },
      {
        "Name": "userName",
        "Type": "",
        "IsRequired": "required",
        "Description": "The database administrator email address."
      },
      {
        "Name": "password",
        "Type": "",
        "IsRequired": "required",
        "Description": "The database administrator password."
      },
      {
        "Name": "companyDetails",
        "Type": "",
        "IsRequired": "required",
        "Description": "The for the database."
      },
      {
        "Name": "demoConfiguration",
        "Type": "",
        "IsRequired": null,
        "Description": "The."
      }
    ],
    "Example": "",
    "Returns": "A string with the direct server the database was created on and database name. Ex. \"my0.geotab.com/abc_company\".",
    "Score": 294
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.CreateBasicUser(Geotab.Checkmate.ObjectModel.Id,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.Group},System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.Group},System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.Group},Geotab.Checkmate.ObjectModel.ClientSettings)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.CreateBasicUser",
    "Name": "CreateBasicUser",
    "Type": "SDK Method",
    "Summary": "Creates a new instance of the with Basic authentication.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The."
      },
      {
        "Name": "login",
        "Type": "",
        "IsRequired": null,
        "Description": "The login (user email)."
      },
      {
        "Name": "firstName",
        "Type": "",
        "IsRequired": null,
        "Description": "The first name of the user."
      },
      {
        "Name": "lastName",
        "Type": "",
        "IsRequired": null,
        "Description": "The last name of the user."
      },
      {
        "Name": "password",
        "Type": "",
        "IsRequired": null,
        "Description": "The password."
      },
      {
        "Name": "comment",
        "Type": "",
        "IsRequired": null,
        "Description": "The comment."
      },
      {
        "Name": "designation",
        "Type": "",
        "IsRequired": null,
        "Description": "The designation."
      },
      {
        "Name": "employeeNo",
        "Type": "",
        "IsRequired": null,
        "Description": "The employeeNo."
      },
      {
        "Name": "activeFrom",
        "Type": "",
        "IsRequired": null,
        "Description": "The from when the User is valid."
      },
      {
        "Name": "activeTo",
        "Type": "",
        "IsRequired": null,
        "Description": "The to when the User is valid."
      },
      {
        "Name": "organizationNodes",
        "Type": "",
        "IsRequired": null,
        "Description": "collection this user belongs to."
      },
      {
        "Name": "reportNodes",
        "Type": "",
        "IsRequired": null,
        "Description": "collection this user belongs to with only report access."
      },
      {
        "Name": "securityNodes",
        "Type": "",
        "IsRequired": null,
        "Description": "collection that defines what parts of the system the user has access to. The(s) are located under the system ."
      },
      {
        "Name": "clientSettings",
        "Type": "",
        "IsRequired": null,
        "Description": "The for this . When adding the newly created, ClientSettings can be null and the default settings will be applied."
      }
    ],
    "Example": "",
    "Returns": "A new Basic Authentication.",
    "Score": 295
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.User.CreateBasicUser(Geotab.Checkmate.ObjectModel.Id,System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.Group},System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.Group},System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.Group},Geotab.Checkmate.ObjectModel.ClientSettings)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.User.CreateBasicUser",
    "Name": "CreateBasicUser",
    "Type": "SDK Method",
    "Summary": "Creates a new instance of the with Basic authentication.",
    "Params": [
      {
        "Name": "id",
        "Type": "",
        "IsRequired": null,
        "Description": "The."
      },
      {
        "Name": "version",
        "Type": "",
        "IsRequired": null,
        "Description": "The version."
      },
      {
        "Name": "login",
        "Type": "",
        "IsRequired": null,
        "Description": "The login (user email)."
      },
      {
        "Name": "firstName",
        "Type": "",
        "IsRequired": null,
        "Description": "The first name of the user."
      },
      {
        "Name": "lastName",
        "Type": "",
        "IsRequired": null,
        "Description": "The last name of the user."
      },
      {
        "Name": "password",
        "Type": "",
        "IsRequired": null,
        "Description": "The password."
      },
      {
        "Name": "comment",
        "Type": "",
        "IsRequired": null,
        "Description": "The comment."
      },
      {
        "Name": "designation",
        "Type": "",
        "IsRequired": null,
        "Description": "The designation."
      },
      {
        "Name": "employeeNo",
        "Type": "",
        "IsRequired": null,
        "Description": "The employeeNo."
      },
      {
        "Name": "activeFrom",
        "Type": "",
        "IsRequired": null,
        "Description": "The from when the User is valid."
      },
      {
        "Name": "activeTo",
        "Type": "",
        "IsRequired": null,
        "Description": "The to when the User is valid."
      },
      {
        "Name": "organizationNodes",
        "Type": "",
        "IsRequired": null,
        "Description": "collection this user belongs to."
      },
      {
        "Name": "reportNodes",
        "Type": "",
        "IsRequired": null,
        "Description": "collection this user belongs to with only report access."
      },
      {
        "Name": "securityNodes",
        "Type": "",
        "IsRequired": null,
        "Description": "collection that defines what parts of the system the user has access to. The(s) are located under the system ."
      },
      {
        "Name": "clientSettings",
        "Type": "",
        "IsRequired": null,
        "Description": "The for this . When adding the newly created, ClientSettings can be null and the default settings will be applied."
      }
    ],
    "Example": "",
    "Returns": "A new Basic Authentication.",
    "Score": 296
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.Create(Geotab.Drawing.PointF)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.Create",
    "Name": "Create",
    "Type": "SDK Method",
    "Summary": "instantiates a new instance of from/>",
    "Params": [
      {
        "Name": "point",
        "Type": "",
        "IsRequired": null,
        "Description": "The."
      }
    ],
    "Example": "",
    "Returns": "New instance of",
    "Score": 297
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.Create(System.Int64)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.Create",
    "Name": "Create",
    "Type": "SDK Method",
    "Summary": "Converts into.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      }
    ],
    "Example": "",
    "Returns": "The result.",
    "Score": 298
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.Create(System.Guid@)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.Create",
    "Name": "Create",
    "Type": "SDK Method",
    "Summary": "Converts into.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      }
    ],
    "Example": "",
    "Returns": "The result.",
    "Score": 299
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.Create(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.Create",
    "Name": "Create",
    "Type": "SDK Method",
    "Summary": "Converts into.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      }
    ],
    "Example": "",
    "Returns": "The result.",
    "Score": 300
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.UnitConversion.UnitConverter.Convert(Geotab.Checkmate.ObjectModel.Engine.StatusData)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.UnitConversion.UnitConverter.Convert",
    "Name": "Convert",
    "Type": "SDK Method",
    "Summary": "Uses the to convert a object.",
    "Params": [
      {
        "Name": "statusData",
        "Type": "",
        "IsRequired": null,
        "Description": "The to use when converting measurement units."
      }
    ],
    "Example": "",
    "Returns": "The converted StatusData.",
    "Score": 301
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.UnitConversion.UnitConverter.Convert(System.Double)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.UnitConversion.UnitConverter.Convert",
    "Name": "Convert",
    "Type": "SDK Method",
    "Summary": "Uses the to convert a primitive.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value to be converted."
      }
    ],
    "Example": "",
    "Returns": "The converted double.",
    "Score": 302
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.UnitConversion.UnitConverter.Convert(System.Single)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.UnitConversion.UnitConverter.Convert",
    "Name": "Convert",
    "Type": "SDK Method",
    "Summary": "Uses the to convert a primitive.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value to be converted."
      }
    ],
    "Example": "",
    "Returns": "The converted float.",
    "Score": 303
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.ContainsCondition(Geotab.Checkmate.ObjectModel.Exceptions.ConditionType[])",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.ContainsCondition",
    "Name": "ContainsCondition",
    "Type": "SDK Method",
    "Summary": "Determines whether this rule contains any of the specified condition kinds in its tree.",
    "Params": [
      {
        "Name": "conditionKinds",
        "Type": "",
        "IsRequired": null,
        "Description": "The condition kinds."
      }
    ],
    "Example": "",
    "Returns": "true if the rule contains conditions of the specified condition kinds; otherwise, false.",
    "Score": 304
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.BinaryData.CompressBinary(System.Byte[])",
    "FullName": "M:Geotab.Checkmate.ObjectModel.BinaryData.CompressBinary",
    "Name": "CompressBinary",
    "Type": "SDK Method",
    "Summary": "Compresses binary data of engine serial number, software version, and calibration ID types. See 7-bit compression in: https://docs.google.com/document/d/1D8P-j-0Aa6unXBhN-EETlCaWK7K_OFMRGoq2H-_2G64/edit#.",
    "Params": [
      {
        "Name": "uncompressedData",
        "Type": "",
        "IsRequired": null,
        "Description": "The uncompressed data."
      }
    ],
    "Example": "",
    "Returns": "The compressed byte array.",
    "Score": 305
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Entity.CompareTo(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Entity.CompareTo",
    "Name": "CompareTo",
    "Type": "SDK Method",
    "Summary": "Compares the current instance with another object of the same type.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "An object to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.",
    "Score": 306
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Id.CompareTo(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Id.CompareTo",
    "Name": "CompareTo",
    "Type": "SDK Method",
    "Summary": "",
    "Params": [],
    "Example": "",
    "Returns": "",
    "Score": 307
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.NameEntity.CompareTo(System.Object)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.NameEntity.CompareTo",
    "Name": "CompareTo",
    "Type": "SDK Method",
    "Summary": "Compares the current instance with another object of the same type.",
    "Params": [
      {
        "Name": "obj",
        "Type": "",
        "IsRequired": null,
        "Description": "An object to compare with this instance."
      }
    ],
    "Example": "",
    "Returns": "A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.",
    "Score": 308
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.CleanRule(System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Rule.CleanRule",
    "Name": "CleanRule",
    "Type": "SDK Method",
    "Summary": "Lightens the rule and the associated condition.",
    "Params": [
      {
        "Name": "includeConditionTree",
        "Type": "",
        "IsRequired": null,
        "Description": ""
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 309
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.CleanCondition(System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.CleanCondition",
    "Name": "CleanCondition",
    "Type": "SDK Method",
    "Summary": "Cleans the condition.",
    "Params": [
      {
        "Name": "includeConditionTree",
        "Type": "",
        "IsRequired": null,
        "Description": "if set to true [include condition tree]."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 310
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.WorkTimeDetail.CheckTimesNotNull(Geotab.Checkmate.ObjectModel.WorkTimeDetail,Geotab.Checkmate.ObjectModel.WorkTimeDetail)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.WorkTimeDetail.CheckTimesNotNull",
    "Name": "CheckTimesNotNull",
    "Type": "SDK Method",
    "Summary": "Throws if either WorkTimeDetail's FromTime or ToTime is null.",
    "Params": [
      {
        "Name": "w1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first"
      },
      {
        "Name": "w2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second"
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 311
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.MimeContentBase.CheckMimeType(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.MimeContentBase.CheckMimeType",
    "Name": "CheckMimeType",
    "Type": "SDK Method",
    "Summary": "Check that the new MimeType being set is short enough for one byte to encode the length.",
    "Params": [
      {
        "Name": "newMimeType",
        "Type": "",
        "IsRequired": null,
        "Description": "New value being set"
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 312
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Entity.CheckAssignId(Geotab.Checkmate.ObjectModel.Id)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Entity.CheckAssignId",
    "Name": "CheckAssignId",
    "Type": "SDK Method",
    "Summary": "Checks the id.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The id to check."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 313
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.XDevice.CheckAndPadChannelArray(System.Int16[])",
    "FullName": "M:Geotab.Checkmate.ObjectModel.XDevice.CheckAndPadChannelArray",
    "Name": "CheckAndPadChannelArray",
    "Type": "SDK Method",
    "Summary": "Checks the provided array is the correct length and pads it to the correct length if it is not.",
    "Params": [
      {
        "Name": "shortArray",
        "Type": "",
        "IsRequired": null,
        "Description": "The short array."
      }
    ],
    "Example": "",
    "Returns": "array of short.",
    "Score": 314
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.XDevice.CheckAndPadAuxIgnArray(System.Boolean[])",
    "FullName": "M:Geotab.Checkmate.ObjectModel.XDevice.CheckAndPadAuxIgnArray",
    "Name": "CheckAndPadAuxIgnArray",
    "Type": "SDK Method",
    "Summary": "Checks the provided array is the correct length and pads it to the correct length if it is not.",
    "Params": [
      {
        "Name": "booleanArray",
        "Type": "",
        "IsRequired": null,
        "Description": "The boolean array."
      }
    ],
    "Example": "",
    "Returns": "array of bool.",
    "Score": 315
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.XDevice.CheckAndPadAuxArray(System.Boolean[])",
    "FullName": "M:Geotab.Checkmate.ObjectModel.XDevice.CheckAndPadAuxArray",
    "Name": "CheckAndPadAuxArray",
    "Type": "SDK Method",
    "Summary": "Checks the provided array is the correct length and pads it to the correct length if it is not.",
    "Params": [
      {
        "Name": "boolArray",
        "Type": "",
        "IsRequired": null,
        "Description": "The bool array."
      }
    ],
    "Example": "",
    "Returns": "array of bool.",
    "Score": 316
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.XDevice.CheckAndPadAuxArray(System.Double[])",
    "FullName": "M:Geotab.Checkmate.ObjectModel.XDevice.CheckAndPadAuxArray",
    "Name": "CheckAndPadAuxArray",
    "Type": "SDK Method",
    "Summary": "Checks the provided array is the correct length and pads it to the correct length if it is not.",
    "Params": [
      {
        "Name": "doubleArray",
        "Type": "",
        "IsRequired": null,
        "Description": "The double array."
      }
    ],
    "Example": "",
    "Returns": "array of double.",
    "Score": 317
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.API.CallAsync``1(System.String,System.Object,System.Threading.CancellationToken)",
    "FullName": "M:Geotab.Checkmate.API.CallAsync``1",
    "Name": "CallAsync``1",
    "Type": "SDK Method",
    "Summary": "Make an API request using a non-generic type method. This is an async call.",
    "Params": [
      {
        "Name": "method",
        "Type": "",
        "IsRequired": "required",
        "Description": "The method name to call."
      },
      {
        "Name": "parameters",
        "Type": "",
        "IsRequired": null,
        "Description": "An anonymous object containing properties (param name) with values (param value). Property name must match that of the method parameter."
      }
    ],
    "Example": "",
    "Returns": "The result for queries and null for non queries (Add, Set, Remove).",
    "Score": 318
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.API.CallAsync``1(System.String,System.Type,System.Object,System.Threading.CancellationToken)",
    "FullName": "M:Geotab.Checkmate.API.CallAsync``1",
    "Name": "CallAsync``1",
    "Type": "SDK Method",
    "Summary": "Make an API call using a generic type method. Generic type methods are methods that have the same name but take a specific object type. This is an async call.",
    "Params": [
      {
        "Name": "method",
        "Type": "",
        "IsRequired": "required",
        "Description": "The method name to call."
      },
      {
        "Name": "type",
        "Type": "",
        "IsRequired": "required",
        "Description": "The use in the generic api call."
      },
      {
        "Name": "parameters",
        "Type": "",
        "IsRequired": null,
        "Description": "An anonymous object containing properties (param name) with values (param value). Property name must match that of the method parameter."
      }
    ],
    "Example": "",
    "Returns": "The result for queries and null for non queries (Add, Set, Remove).",
    "Score": 319
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.API.Call``1(System.String,System.Type,System.Object)",
    "FullName": "M:Geotab.Checkmate.API.Call``1",
    "Name": "Call``1",
    "Type": "SDK Method",
    "Summary": "Make an API call using a generic type method. Generic type methods are methods that have the same name but take a specific object type.",
    "Params": [
      {
        "Name": "method",
        "Type": "",
        "IsRequired": "required",
        "Description": "The method name to call."
      },
      {
        "Name": "type",
        "Type": "",
        "IsRequired": "required",
        "Description": "The use in the generic call."
      },
      {
        "Name": "parameters",
        "Type": "",
        "IsRequired": null,
        "Description": "An anonymous object containing properties (param name) with values (param value). Property name must match that of the method parameter."
      }
    ],
    "Example": "",
    "Returns": "The result for queries and null for non queries (Add, Set, Remove).",
    "Score": 320
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.API.Call``1(System.String,System.Object)",
    "FullName": "M:Geotab.Checkmate.API.Call``1",
    "Name": "Call``1",
    "Type": "SDK Method",
    "Summary": "Make an API request using a non-generic type method.",
    "Params": [
      {
        "Name": "method",
        "Type": "",
        "IsRequired": "required",
        "Description": "The method name to call."
      },
      {
        "Name": "parameters",
        "Type": "",
        "IsRequired": null,
        "Description": "An anonymous object containing properties (param name) with values (param value). Property name must match that of the method parameter."
      }
    ],
    "Example": "",
    "Returns": "The result for queries and null for non queries (Add, Set, Remove).",
    "Score": 321
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Coordinate.CalculatePolygonArea(System.Collections.Generic.IList{Geotab.Checkmate.ObjectModel.ISimpleCoordinate})",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Coordinate.CalculatePolygonArea",
    "Name": "CalculatePolygonArea",
    "Type": "SDK Method",
    "Summary": "Calculate area of an n-polygon in square kilometres.",
    "Params": [
      {
        "Name": "points",
        "Type": "",
        "IsRequired": null,
        "Description": "The n+1 coordinates of the n-polygon."
      }
    ],
    "Example": "",
    "Returns": "a double",
    "Score": 322
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.XDevice.ByteToSpeed(System.Int16)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.XDevice.ByteToSpeed",
    "Name": "ByteToSpeed",
    "Type": "SDK Method",
    "Summary": "Converts byte to speed.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      }
    ],
    "Example": "",
    "Returns": "The speed in km/h.",
    "Score": 323
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.XDevice.ByteToDegrees(System.Int16)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.XDevice.ByteToDegrees",
    "Name": "ByteToDegrees",
    "Type": "SDK Method",
    "Summary": "Converts bytes to degrees.",
    "Params": [
      {
        "Name": "value",
        "Type": "",
        "IsRequired": null,
        "Description": "The value."
      }
    ],
    "Example": "",
    "Returns": "The angle.",
    "Score": 324
  },
  {
    "FullNameWithParams": "M:CheckmateServer.Web.WebMethods.AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken@)",
    "FullName": "M:CheckmateServer.Web.WebMethods.AuthenticateAsync",
    "Name": "Authenticate",
    "Type": "SDK Method",
    "Summary": "Authenticates a user and provides a if successful. The authentication pattern is documented in the Concepts sections of the SDK. Throws:",
    "Params": [
      {
        "Name": "database",
        "Type": "",
        "IsRequired": null,
        "Description": "The database to authenticate against. If the user is registered on only one database; the user will be automatically authenticated against the correct database and this parameter can be omitted (the database name is returned in the object). If the user is registered in multiple databases; the database value for the particular database you are trying to authenticate against must be provided."
      },
      {
        "Name": "userName",
        "Type": "",
        "IsRequired": "required",
        "Description": "The user name (typically an email address) that identifies the user being authenticated."
      },
      {
        "Name": "userLogin",
        "Type": "",
        "IsRequired": null,
        "Description": "The user name (typically and email address) that identifies the user being authenticated."
      },
      {
        "Name": "password",
        "Type": "",
        "IsRequired": "required",
        "Description": "The user's Geotab password."
      },
      {
        "Name": "global",
        "Type": "",
        "IsRequired": null,
        "Description": "If true, try log into any server in the federation."
      }
    ],
    "Example": "The following JavaScript example shows how to call Authenticate. Just fill in your details for each of the parameters. api.call(\"Authenticate\", { \"userName\":\"\", \"database\":\"\", \"password\":\"\" });",
    "Returns": "A object. It contains the Credentials property that can be used for further API calls. A result of LoginResult.Path = \"ThisServer\" occurs when the user is found on the current server. Otherwise, a server name is returned and the client must redirect to this new server name.",
    "Score": 325
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.API.AuthenticateAsync(System.Threading.CancellationToken)",
    "FullName": "M:Geotab.Checkmate.API.AuthenticateAsync",
    "Name": "Authenticate",
    "Type": "SDK Method",
    "Summary": "Authenticate the user in an async call.",
    "Params": [],
    "Example": "",
    "Returns": "A Task which is a result of calling AuthenticateImplAsync.",
    "Score": 326
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.AreHourlyDataEqual(Geotab.Checkmate.ObjectModel.FuelTaxDetail,Geotab.Checkmate.ObjectModel.FuelTaxDetail)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.AreHourlyDataEqual",
    "Name": "AreHourlyDataEqual",
    "Type": "SDK Method",
    "Summary": "Gets a value indicating if two elements have the same hourly data.",
    "Params": [
      {
        "Name": "detail1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first detail."
      },
      {
        "Name": "detail2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second detail."
      }
    ],
    "Example": "",
    "Returns": "true iff the details have the same hourly data.",
    "Score": 327
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.AreEqual(Geotab.Checkmate.ObjectModel.FuelTaxDetail,Geotab.Checkmate.ObjectModel.FuelTaxDetail)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.AreEqual",
    "Name": "AreEqual",
    "Type": "SDK Method",
    "Summary": "Gets a value indicating if two elements have the same properties.",
    "Params": [
      {
        "Name": "detail1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first detail."
      },
      {
        "Name": "detail2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second detail."
      }
    ],
    "Example": "",
    "Returns": "true iff the details have the same properties.",
    "Score": 328
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.AreAttributesEqual(Geotab.Checkmate.ObjectModel.FuelTaxDetail,Geotab.Checkmate.ObjectModel.FuelTaxDetail)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FuelTaxDetail.AreAttributesEqual",
    "Name": "AreAttributesEqual",
    "Type": "SDK Method",
    "Summary": "Checks if two elements have the same attributes.",
    "Params": [
      {
        "Name": "detail1",
        "Type": "",
        "IsRequired": null,
        "Description": "The first detail."
      },
      {
        "Name": "detail2",
        "Type": "",
        "IsRequired": null,
        "Description": "The second detail."
      }
    ],
    "Example": "",
    "Returns": "true iff the details have the same attributes.",
    "Score": 329
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.FieldSelector.Append(System.String)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.FieldSelector.Append",
    "Name": "Append",
    "Type": "SDK Method",
    "Summary": "Appends a field to the selection.",
    "Params": [
      {
        "Name": "field",
        "Type": "",
        "IsRequired": null,
        "Description": "The field."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 330
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.MaxRoadSpeedResult.AddSpeedToList(System.Collections.Generic.List{Geotab.Checkmate.ObjectModel.MaxRoadSpeedResult},Geotab.Checkmate.ObjectModel.MaxRoadSpeedResult)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.MaxRoadSpeedResult.AddSpeedToList",
    "Name": "AddSpeedToList",
    "Type": "SDK Method",
    "Summary": "Add an entry to the List.",
    "Params": [
      {
        "Name": "list",
        "Type": "",
        "IsRequired": null,
        "Description": "The list."
      },
      {
        "Name": "result",
        "Type": "",
        "IsRequired": null,
        "Description": "The result."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 331
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.AddChildren(System.Collections.Generic.IEnumerable{Geotab.Checkmate.ObjectModel.Exceptions.Condition},System.Boolean)",
    "FullName": "M:Geotab.Checkmate.ObjectModel.Exceptions.Condition.AddChildren",
    "Name": "AddChildren",
    "Type": "SDK Method",
    "Summary": "Adds the children to a condition.",
    "Params": [
      {
        "Name": "newChildren",
        "Type": "",
        "IsRequired": null,
        "Description": "The children."
      },
      {
        "Name": "clone",
        "Type": "",
        "IsRequired": null,
        "Description": "if set to true [clone]."
      }
    ],
    "Example": "",
    "Returns": "",
    "Score": 332
  },
  {
    "FullNameWithParams": "M:Geotab.Checkmate.Database.DataStore.Add``1(``0)",
    "FullName": "M:Geotab.Checkmate.Database.DataStore.Add``1",
    "Name": "Add``1",
    "Type": "SDK Method",
    "Summary": "Adds a new to the database. This method is used to add the different entities to the database, for example, or. In addition to the credentials, the method will require a minimum of two parameters - the type of entity that is being added (typeName) and the entity itself. In most cases, the entity being added will need to be fully constructed. In other words, all its properties need to be defined. These requirements are defined in each of the entity definitions below.",
    "Params": [
      {
        "Name": "entity",
        "Type": "",
        "IsRequired": "required",
        "Description": "The new to add to the database."
      }
    ],
    "Example": "The following JavaScript example Adds a new Zone with a randomly generated name, such as \"Example zone 123123123\". api.call(\"Add\", {\"typeName\":\"Zone\", \"entity\":{ \"name\":\"Example zone \" + new Date().getTime(), \"mustIdentifyStops\":true, \"displayed\":true, \"activeFrom\":\"1986-01-01T00:00:00.000Z\", \"activeTo\":\"2050-01-01T00:00:00.000Z\", \"zoneTypes\":[\"ZoneTypeOfficeId\"], \"fillColor\":{\"r\":255, \"g\":165, \"b\":0, \"a\":191}, \"points\":[{\"x\": -79.712318, \"y\": 43.438266},{\"x\": -79.711181, \"y\": 43.437461},{\"x\": -79.712677, \"y\": 43.436168},{\"x\": -79.713966, \"y\": 43.437107},{\"x\": -79.712318, \"y\": 43.438266}], \"groups\":[{id:\"GroupCompanyId\"}]} });",
    "Returns": "The for the newly added.",
    "Score": 333
  }
]